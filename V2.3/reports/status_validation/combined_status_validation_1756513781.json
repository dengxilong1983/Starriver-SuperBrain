{
  "timestamp": "2025-08-30 08:29:41",
  "overall_success": false,
  "total_duration": 35.01792073249817,
  "coverage_percentage": 0.0,
  "summary": {
    "total_tests": 16,
    "passed_tests": 0,
    "failed_tests": 12,
    "integration_tests_success": false,
    "postman_collection_success": false
  },
  "detailed_results": [
    {
      "type": "integration_tests",
      "success": false,
      "duration": 26.852490186691284,
      "stdout": null,
      "stderr": "test_agents_status_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_agents_status_endpoint)\nTest /api/v2.3-preview/agents/status for status enum compliance. ... FAIL\ntest_cloud_status_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_cloud_status_endpoint)\nTest /api/v2.3-preview/cloud/status for cloud status compliance. ... FAIL\ntest_consciousness_attention_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_consciousness_attention_endpoint)\nTest /api/v2.3-preview/consciousness/attention for attention status compliance. ... FAIL\ntest_consciousness_state_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_consciousness_state_endpoint)\nTest /api/v2.3-preview/consciousness/state for consciousness status compliance. ... FAIL\ntest_execution_act_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_execution_act_endpoint)\nTest /api/v2.3-preview/execution/act for execution status compliance. ... FAIL\ntest_experience_candidates_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_experience_candidates_endpoint)\nTest /api/v2.3-preview/experience/candidates for experience status compliance. ... FAIL\ntest_experience_rules_post_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_experience_rules_post_endpoint)\nTest /api/v2.3-preview/experience/rules POST for experience status compliance. ... FAIL\ntest_memory_export_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_memory_export_endpoint)\nTest /api/v2.3-preview/memory/export for task status compliance. ... FAIL\ntest_memory_sync_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_memory_sync_endpoint)\nTest /api/v2.3-preview/memory/sync for job status compliance. ... FAIL\ntest_observability_logs_search_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_observability_logs_search_endpoint)\nTest /api/v2.3-preview/observability/logs/search for log status compliance. ... FAIL\ntest_observability_metrics_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_observability_metrics_endpoint)\nTest /api/v2.3-preview/observability/metrics for metrics status compliance. ... FAIL\ntest_reasoning_plan_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_reasoning_plan_endpoint)\nTest /api/v2.3-preview/reasoning/plan for task status compliance. ... FAIL\ntest_status_enum_coverage_report (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_status_enum_coverage_report)\nGenerate coverage report for status enum validation. ... ok\n\n======================================================================\nFAIL: test_agents_status_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_agents_status_endpoint)\nTest /api/v2.3-preview/agents/status for status enum compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 84, in test_agents_status_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_cloud_status_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_cloud_status_endpoint)\nTest /api/v2.3-preview/cloud/status for cloud status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 219, in test_cloud_status_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_consciousness_attention_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_consciousness_attention_endpoint)\nTest /api/v2.3-preview/consciousness/attention for attention status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 157, in test_consciousness_attention_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_consciousness_state_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_consciousness_state_endpoint)\nTest /api/v2.3-preview/consciousness/state for consciousness status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 170, in test_consciousness_state_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_execution_act_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_execution_act_endpoint)\nTest /api/v2.3-preview/execution/act for execution status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 130, in test_execution_act_endpoint\n    self.assertIn(response.status_code, [200, 201, 202],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 201, 202] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_experience_candidates_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_experience_candidates_endpoint)\nTest /api/v2.3-preview/experience/candidates for experience status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 205, in test_experience_candidates_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_experience_rules_post_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_experience_rules_post_endpoint)\nTest /api/v2.3-preview/experience/rules POST for experience status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 191, in test_experience_rules_post_endpoint\n    self.assertIn(response.status_code, [200, 201],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 201] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_memory_export_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_memory_export_endpoint)\nTest /api/v2.3-preview/memory/export for task status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 116, in test_memory_export_endpoint\n    self.assertIn(response.status_code, [200, 202, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 202, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_memory_sync_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_memory_sync_endpoint)\nTest /api/v2.3-preview/memory/sync for job status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 102, in test_memory_sync_endpoint\n    self.assertIn(response.status_code, [200, 202, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 202, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_observability_logs_search_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_observability_logs_search_endpoint)\nTest /api/v2.3-preview/observability/logs/search for log status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 248, in test_observability_logs_search_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_observability_metrics_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_observability_metrics_endpoint)\nTest /api/v2.3-preview/observability/metrics for metrics status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 232, in test_observability_metrics_endpoint\n    self.assertIn(response.status_code, [200, 204],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 204] : Unexpected status code: 503\n\n======================================================================\nFAIL: test_reasoning_plan_endpoint (tests.integration.status_validation_test.StatusValidationIntegrationTest.test_reasoning_plan_endpoint)\nTest /api/v2.3-preview/reasoning/plan for task status compliance.\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\鏄熸渤瓒呰剳\\鏄熸渤瓒呰剳\\V2.3\\tests\\integration\\status_validation_test.py\", line 144, in test_reasoning_plan_endpoint\n    self.assertIn(response.status_code, [200, 201, 202],\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                 f\"Unexpected status code: {response.status_code}\")\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError: 503 not found in [200, 201, 202] : Unexpected status code: 503\n\n----------------------------------------------------------------------\nRan 13 tests in 25.851s\n\nFAILED (failures=12)\n",
      "returncode": 1
    },
    {
      "type": "postman_collection",
      "success": false,
      "duration": 8.165430545806885,
      "stdout": "newman\n\nV2.3 Status Enum Compliance - Enhanced Coverage\n\n→ Agents Status\n  GET http://localhost:8000/api/v2.3-preview/agents/status [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n  2. Response is JSON\n  √  Agent health status validation passed\n\n→ Memory Sync (202 + CloudSyncJob)\n  POST http://localhost:8000/api/v2.3-preview/memory/sync [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n  4. Accepted (202) or OK (200/201/204) for sync endpoint\n  √  CloudSyncJob status validation passed\n\n→ Memory Export\n  GET http://localhost:8000/api/v2.3-preview/memory/export [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n  6. Export endpoint responds successfully\n\n→ Execution Act\n  POST http://localhost:8000/api/v2.3-preview/execution/act [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n  8. Execution endpoint responds\n\n→ Reasoning Plan\n  POST http://localhost:8000/api/v2.3-preview/reasoning/plan [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 10. Reasoning plan endpoint responds\n\n→ Consciousness Attention GET\n  GET http://localhost:8000/api/v2.3-preview/consciousness/attention [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 12. Attention GET endpoint responds\n\n→ Consciousness State GET\n  GET http://localhost:8000/api/v2.3-preview/consciousness/state [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 14. State GET endpoint responds\n\n→ Experience Rules POST\n  POST http://localhost:8000/api/v2.3-preview/experience/rules [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 16. Experience rules POST endpoint responds\n  √  Experience rule status validation passed\n\n→ Experience Candidates GET\n  GET http://localhost:8000/api/v2.3-preview/experience/candidates [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 18. Experience candidates endpoint responds\n\n→ Cloud Status\n  GET http://localhost:8000/api/v2.3-preview/cloud/status?user_id=test-user [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 20. Cloud status endpoint responds\n\n→ Observability Metrics\n  GET http://localhost:8000/api/v2.3-preview/observability/metrics [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 22. Metrics endpoint responds\n  √  Metrics status validation completed\n\n→ Observability Logs Search\n  GET http://localhost:8000/api/v2.3-preview/observability/logs/search?q=test [errored]\n     connect ECONNREFUSED 127.0.0.1:8000\n 24. Logs search endpoint responds\n\n┌─────────────────────────┬──────────┬──────────┐\n│                         │ executed │   failed │\n├─────────────────────────┼──────────┼──────────┤\n│              iterations │        1 │        0 │\n├─────────────────────────┼──────────┼──────────┤\n│                requests │       12 │       12 │\n├─────────────────────────┼──────────┼──────────┤\n│            test-scripts │       12 │        0 │\n├─────────────────────────┼──────────┼──────────┤\n│      prerequest-scripts │        0 │        0 │\n├─────────────────────────┼──────────┼──────────┤\n│              assertions │       16 │       12 │\n├─────────────────────────┴──────────┴──────────┤\n│ total run duration: 7.3s                      │\n├───────────────────────────────────────────────┤\n│ total data received: 0B (approx)              │\n└───────────────────────────────────────────────┘\n\n\u001b[31m   # \u001b[39m\u001b[31m failure        \u001b[39m\u001b[31m detail                                                   \u001b[39m\n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 01.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 02.  AssertionError  Response is JSON                                         \n                      expected response to have header with key 'Content-Type' \n                      at assertion:0 in test-script                            \n                      inside \"Agents Status\"                                   \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 03.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 04.  AssertionError  Accepted (202) or OK (200/201/204) for sync endpoint     \n                      expected [ 200, 201, 202, 204 ] to include undefined     \n                      at assertion:0 in test-script                            \n                      inside \"Memory Sync (202 + CloudSyncJob)\"                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 05.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 06.  AssertionError  Export endpoint responds successfully                    \n                      expected [ 200, 202 ] to include undefined               \n                      at assertion:0 in test-script                            \n                      inside \"Memory Export\"                                   \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 07.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 08.  AssertionError  Execution endpoint responds                              \n                      expected [ 200, 201, 202 ] to include undefined          \n                      at assertion:0 in test-script                            \n                      inside \"Execution Act\"                                   \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 09.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 10.  AssertionError  Reasoning plan endpoint responds                         \n                      expected [ 200, 201, 202 ] to include undefined          \n                      at assertion:0 in test-script                            \n                      inside \"Reasoning Plan\"                                  \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 11.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 12.  AssertionError  Attention GET endpoint responds                          \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Consciousness Attention GET\"                     \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 13.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 14.  AssertionError  State GET endpoint responds                              \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Consciousness State GET\"                         \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 15.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 16.  AssertionError  Experience rules POST endpoint responds                  \n                      expected [ 200, 201 ] to include undefined               \n                      at assertion:0 in test-script                            \n                      inside \"Experience Rules POST\"                           \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 17.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 18.  AssertionError  Experience candidates endpoint responds                  \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Experience Candidates GET\"                       \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 19.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 20.  AssertionError  Cloud status endpoint responds                           \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Cloud Status\"                                    \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 21.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 22.  AssertionError  Metrics endpoint responds                                \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Observability Metrics\"                           \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 23.  Error                                                                    \n                      connect ECONNREFUSED 127.0.0.1:8000                      \n                      at request                                               \n                      inside \"\"                                                \n\u001b[90m     \u001b[39m\u001b[90m                \u001b[39m\u001b[90m                                                          \u001b[39m\n 24.  AssertionError  Logs search endpoint responds                            \n                      expected [ 200 ] to include undefined                    \n                      at assertion:0 in test-script                            \n                      inside \"Observability Logs Search\"                       \n",
      "stderr": "",
      "returncode": 1,
      "report_file": "C:\\星河超脑\\星河超脑\\V2.3\\reports\\status_validation\\postman_report_1756513772.json",
      "detailed_results": {
        "collection": {
          "item": [
            {
              "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                  }
                }
              ]
            },
            {
              "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                  }
                }
              ]
            },
            {
              "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                  }
                }
              ]
            },
            {
              "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                  }
                }
              ]
            },
            {
              "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                  }
                }
              ]
            },
            {
              "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                  }
                }
              ]
            },
            {
              "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                  }
                }
              ]
            },
            {
              "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                  }
                }
              ]
            },
            {
              "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                  }
                }
              ]
            },
            {
              "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "user_id",
                      "value": "test-user"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                  }
                }
              ]
            },
            {
              "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                  }
                }
              ]
            },
            {
              "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "environment": {
          "_": {
            "postman_variable_scope": "environment",
            "postman_exported_at": "2025-08-28T08:00:00.000Z",
            "postman_exported_using": "Postman/10.x"
          },
          "id": "8f7b3a74-5c2f-4e15-9db0-1e5f2243e001",
          "name": "V2.3 Local",
          "values": [
            {
              "type": "any",
              "value": "http://localhost:8000",
              "key": "baseUrl"
            },
            {
              "type": "any",
              "value": "http://localhost:8000",
              "key": "BASE_URL"
            },
            {
              "type": "any",
              "value": "http://localhost:8000",
              "key": "baseurl"
            }
          ]
        },
        "globals": {
          "id": "5f14a87f-cb47-4fd7-99c6-30848d124422",
          "values": []
        },
        "run": {
          "stats": {
            "iterations": {
              "total": 1,
              "pending": 0,
              "failed": 0
            },
            "items": {
              "total": 12,
              "pending": 0,
              "failed": 0
            },
            "scripts": {
              "total": 12,
              "pending": 0,
              "failed": 0
            },
            "prerequests": {
              "total": 12,
              "pending": 0,
              "failed": 0
            },
            "requests": {
              "total": 12,
              "pending": 0,
              "failed": 12
            },
            "tests": {
              "total": 12,
              "pending": 0,
              "failed": 0
            },
            "assertions": {
              "total": 16,
              "pending": 0,
              "failed": 12
            },
            "testScripts": {
              "total": 12,
              "pending": 0,
              "failed": 0
            },
            "prerequestScripts": {
              "total": 0,
              "pending": 0,
              "failed": 0
            }
          },
          "timings": {
            "responseAverage": 0,
            "responseMin": 0,
            "responseMax": 0,
            "responseSd": 0,
            "dnsAverage": 0,
            "dnsMin": 0,
            "dnsMax": 0,
            "dnsSd": 0,
            "firstByteAverage": 0,
            "firstByteMin": 0,
            "firstByteMax": 0,
            "firstByteSd": 0,
            "started": 1756513773618,
            "completed": 1756513780990
          },
          "executions": [
            {
              "cursor": {
                "position": 0,
                "iteration": 0,
                "length": 12,
                "cycles": 1,
                "empty": false,
                "eof": false,
                "bof": true,
                "cr": false,
                "ref": "6fd6651b-6ea9-42b2-8f8b-1b020635d9f1",
                "httpRequestId": "8e9b2124-2f44-4163-bffd-4c0fcc7c4fba"
              },
              "item": {
                "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                "name": "Agents Status",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "agents",
                      "status"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Response is JSON', function () {",
                        "  pm.response.to.have.header('Content-Type');",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                        "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "443b7534-0c66-4ed3-8129-901cc8954916",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Response is JSON",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Response is JSON",
                    "message": "expected response to have header with key 'Content-Type'",
                    "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)"
                  }
                },
                {
                  "assertion": "Agent health status validation passed",
                  "skipped": false
                }
              ]
            },
            {
              "cursor": {
                "ref": "8428fe2a-7bfd-4719-954a-f579e080a5d0",
                "length": 12,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "fffc608b-a561-4379-93ad-af7fb4988554"
              },
              "item": {
                "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                "name": "Memory Sync (202 + CloudSyncJob)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "sync"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                      "type": "text/javascript",
                      "exec": [
                        "const status = pm.response.code;",
                        "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                        "  pm.expect([200,201,202,204]).to.include(status);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "3a7c7eb3-41b9-4ede-975f-81a0e097a7e6",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Accepted (202) or OK (200/201/204) for sync endpoint",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
                    "message": "expected [ 200, 201, 202, 204 ] to include undefined",
                    "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)"
                  }
                },
                {
                  "assertion": "CloudSyncJob status validation passed",
                  "skipped": false
                }
              ]
            },
            {
              "cursor": {
                "ref": "b8cf5eb7-b5d0-4106-9fa4-02d6517e4155",
                "length": 12,
                "cycles": 1,
                "position": 2,
                "iteration": 0,
                "httpRequestId": "fc229039-e9a4-48fa-a2c7-0ebb45ae323b"
              },
              "item": {
                "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                "name": "Memory Export",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "export"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Export endpoint responds successfully', function () {",
                        "  pm.expect([200,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function validateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                        "      }",
                        "      validateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateStatus(json);"
                      ],
                      "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "dfbdc8db-2dad-4c62-87f3-7adc011ea36a",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Export endpoint responds successfully",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Export endpoint responds successfully",
                    "message": "expected [ 200, 202 ] to include undefined",
                    "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "82cdea91-4acf-4af8-91a0-5c101084cca2",
                "length": 12,
                "cycles": 1,
                "position": 3,
                "iteration": 0,
                "httpRequestId": "9ccea3ff-289f-4c84-a15d-8926659ab54b"
              },
              "item": {
                "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                "name": "Execution Act",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "execution",
                      "act"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Execution endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validateExecutionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                        "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                        "      }",
                        "      validateExecutionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExecutionStatus(json);"
                      ],
                      "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "fda62008-92d4-4b01-8d30-49e89de6c8ac",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Execution endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Execution endpoint responds",
                    "message": "expected [ 200, 201, 202 ] to include undefined",
                    "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "2b40a695-22ae-4825-a99a-bd3fba2432c7",
                "length": 12,
                "cycles": 1,
                "position": 4,
                "iteration": 0,
                "httpRequestId": "67a17bdc-bfc6-4a7d-9aab-9406c6de1bf8"
              },
              "item": {
                "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                "name": "Reasoning Plan",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "reasoning",
                      "plan"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Reasoning plan endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validatePlanStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                        "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                        "      }",
                        "      validatePlanStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validatePlanStatus(json);"
                      ],
                      "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "fdd65738-7ba0-401d-afde-d27048bba18b",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Reasoning plan endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Reasoning plan endpoint responds",
                    "message": "expected [ 200, 201, 202 ] to include undefined",
                    "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "bb1c9f8c-23ee-418c-9da1-ed8cb4425d4d",
                "length": 12,
                "cycles": 1,
                "position": 5,
                "iteration": 0,
                "httpRequestId": "cdc79272-a1cf-4fe5-9c92-915865678fcb"
              },
              "item": {
                "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                "name": "Consciousness Attention GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "attention"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Attention GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                        "",
                        "function validateAttentionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                        "      }",
                        "      validateAttentionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateAttentionStatus(json);"
                      ],
                      "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "867ee15d-edec-4f33-95ef-627da17235d4",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Attention GET endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Attention GET endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "0246b8d6-80f0-4221-9f02-5c6ec5c2401a",
                "length": 12,
                "cycles": 1,
                "position": 6,
                "iteration": 0,
                "httpRequestId": "fafc7600-1c9c-4101-92d5-75ead78f8c44"
              },
              "item": {
                "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                "name": "Consciousness State GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "state"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('State GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateConsciousnessState(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                        "      }",
                        "      validateConsciousnessState(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateConsciousnessState(json);"
                      ],
                      "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "790315ec-14fc-4dda-a45f-e47b6dc93cac",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "State GET endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "State GET endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "501de7dc-28eb-4162-a6cd-ab829edff54b",
                "length": 12,
                "cycles": 1,
                "position": 7,
                "iteration": 0,
                "httpRequestId": "f7fd25a8-d1d1-45e4-bcb7-db365d389a80"
              },
              "item": {
                "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                "name": "Experience Rules POST",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "rules"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience rules POST endpoint responds', function () {",
                        "  pm.expect([200,201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateExperienceStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        // Experience rules can use 'active' (enable/disable semantics)",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                        "      }",
                        "      validateExperienceStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExperienceStatus(json);",
                        "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "f54917d5-9cb4-436e-8dad-c974dded49e7",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                }
              },
              "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Experience rules POST endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Experience rules POST endpoint responds",
                    "message": "expected [ 200, 201 ] to include undefined",
                    "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)"
                  }
                },
                {
                  "assertion": "Experience rule status validation passed",
                  "skipped": false
                }
              ]
            },
            {
              "cursor": {
                "ref": "7958cc9e-9a33-4123-b77f-b5ad01bd8a25",
                "length": 12,
                "cycles": 1,
                "position": 8,
                "iteration": 0,
                "httpRequestId": "c2b53f9b-54b4-40fe-908d-1671a38801b3"
              },
              "item": {
                "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                "name": "Experience Candidates GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "candidates"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience candidates endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateCandidateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                        "      }",
                        "      validateCandidateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCandidateStatus(json);"
                      ],
                      "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "aa0c7a9e-c652-488c-9556-7dd8d88491a0",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Experience candidates endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Experience candidates endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "d11c6f19-77bb-43ae-9a5a-dd2287e6b6a8",
                "length": 12,
                "cycles": 1,
                "position": 9,
                "iteration": 0,
                "httpRequestId": "eeb2cd68-acb2-43f8-807a-2b77d8266228"
              },
              "item": {
                "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                "name": "Cloud Status",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "cloud",
                      "status"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "user_id",
                        "value": "test-user"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Cloud status endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                        "",
                        "function validateCloudStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                        "      }",
                        "      validateCloudStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCloudStatus(json);"
                      ],
                      "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [
                    {
                      "key": "user_id",
                      "value": "test-user"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "3e9af920-dd20-423d-a4de-3334b5ae7421",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Cloud status endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Cloud status endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "d0d65584-0b86-4876-bdd5-8892a64a3bf7",
                "length": 12,
                "cycles": 1,
                "position": 10,
                "iteration": 0,
                "httpRequestId": "c3f19673-273a-4e4f-9385-d1176de720bf"
              },
              "item": {
                "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                "name": "Observability Metrics",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "metrics"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Metrics endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateMetricsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                        "      }",
                        "      validateMetricsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateMetricsStatus(json);",
                        "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "f86bdc60-0133-42de-9faa-e91253e2a452",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Metrics endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Metrics endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)"
                  }
                },
                {
                  "assertion": "Metrics status validation completed",
                  "skipped": false
                }
              ]
            },
            {
              "cursor": {
                "ref": "ecfb1d60-a32c-4a59-b384-673aaa6dde39",
                "length": 12,
                "cycles": 1,
                "position": 11,
                "iteration": 0,
                "httpRequestId": "8dbde467-272f-4d9d-8b7b-b49f266f8954"
              },
              "item": {
                "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                "name": "Observability Logs Search",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "logs",
                      "search"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "q",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Logs search endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateLogsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                        "      }",
                        "      validateLogsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateLogsStatus(json);"
                      ],
                      "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "http",
                  "port": "8000",
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "localhost"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "a1f0eff7-8123-4b91-94ab-926be49d5217",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "localhost:8000",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
              "requestError": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000
              },
              "assertions": [
                {
                  "assertion": "Logs search endpoint responds",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 0,
                    "test": "Logs search endpoint responds",
                    "message": "expected [ 200 ] to include undefined",
                    "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)"
                  }
                }
              ]
            }
          ],
          "transfers": {
            "responseTotal": 0
          },
          "failures": [
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "06554fb9-048d-446b-9ef8-f9d9a05f3059",
                "timestamp": 1756513774161,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                "name": "Agents Status",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "agents",
                      "status"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "443b7534-0c66-4ed3-8129-901cc8954916",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Response is JSON', function () {",
                        "  pm.response.to.have.header('Content-Type');",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                        "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "position": 0,
                "iteration": 0,
                "length": 12,
                "cycles": 1,
                "empty": false,
                "eof": false,
                "bof": true,
                "cr": false,
                "ref": "6fd6651b-6ea9-42b2-8f8b-1b020635d9f1",
                "httpRequestId": "8e9b2124-2f44-4163-bffd-4c0fcc7c4fba"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Response is JSON",
                "message": "expected response to have header with key 'Content-Type'",
                "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)",
                "checksum": "d4d0ba5fa0e47d6c6ecf1fc4157edd5a",
                "id": "0ff2a27d-040f-4994-bd14-40fc50c2c106",
                "timestamp": 1756513774183,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 1,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                "name": "Agents Status",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "agents",
                      "status"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Response is JSON', function () {",
                        "  pm.response.to.have.header('Content-Type');",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                        "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "position": 0,
                "iteration": 0,
                "length": 12,
                "cycles": 1,
                "empty": false,
                "eof": false,
                "bof": true,
                "cr": false,
                "ref": "6fd6651b-6ea9-42b2-8f8b-1b020635d9f1",
                "httpRequestId": "8e9b2124-2f44-4163-bffd-4c0fcc7c4fba",
                "scriptId": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                "execution": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "c06a1e2a-4c44-4241-adfe-5856fee82d6d",
                "timestamp": 1756513774767,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                "name": "Memory Sync (202 + CloudSyncJob)",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "sync"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "3a7c7eb3-41b9-4ede-975f-81a0e097a7e6",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                      "type": "text/javascript",
                      "exec": [
                        "const status = pm.response.code;",
                        "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                        "  pm.expect([200,201,202,204]).to.include(status);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "8428fe2a-7bfd-4719-954a-f579e080a5d0",
                "length": 12,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "fffc608b-a561-4379-93ad-af7fb4988554"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
                "message": "expected [ 200, 201, 202, 204 ] to include undefined",
                "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)",
                "checksum": "5de7bae6b1fc39a5c7260d76508ef4fe",
                "id": "0f8bed67-24a7-465a-b78d-43ec855e7185",
                "timestamp": 1756513774778,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 2,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                "name": "Memory Sync (202 + CloudSyncJob)",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "sync"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Content-Type",
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                      "type": "text/javascript",
                      "exec": [
                        "const status = pm.response.code;",
                        "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                        "  pm.expect([200,201,202,204]).to.include(status);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function scan(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                        "      }",
                        "      scan(v);",
                        "    });",
                        "  }",
                        "}",
                        "scan(json);",
                        "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "8428fe2a-7bfd-4719-954a-f579e080a5d0",
                "length": 12,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "fffc608b-a561-4379-93ad-af7fb4988554",
                "scriptId": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                "execution": "426585e4-e6e3-44c9-9018-cf864268db79"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "3738e848-7ab7-4ffb-ae0c-fde3e6c1c253",
                "timestamp": 1756513775374,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                "name": "Memory Export",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "export"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "dfbdc8db-2dad-4c62-87f3-7adc011ea36a",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Export endpoint responds successfully', function () {",
                        "  pm.expect([200,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function validateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                        "      }",
                        "      validateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "b8cf5eb7-b5d0-4106-9fa4-02d6517e4155",
                "length": 12,
                "cycles": 1,
                "position": 2,
                "iteration": 0,
                "httpRequestId": "fc229039-e9a4-48fa-a2c7-0ebb45ae323b"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Export endpoint responds successfully",
                "message": "expected [ 200, 202 ] to include undefined",
                "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)",
                "checksum": "f8b82eeff0b67ea8955f03e8f0f1e0da",
                "id": "021aa939-6009-4635-a3a9-ac4992c58fc4",
                "timestamp": 1756513775388,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 3,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                "name": "Memory Export",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "memory",
                      "export"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Export endpoint responds successfully', function () {",
                        "  pm.expect([200,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                        "",
                        "function validateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                        "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                        "      }",
                        "      validateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateStatus(json);"
                      ],
                      "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "b8cf5eb7-b5d0-4106-9fa4-02d6517e4155",
                "length": 12,
                "cycles": 1,
                "position": 2,
                "iteration": 0,
                "httpRequestId": "fc229039-e9a4-48fa-a2c7-0ebb45ae323b",
                "scriptId": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                "execution": "7df1e662-ad6c-45c9-8dd9-329445213610"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "7879fef5-650b-4550-b644-82d7df7dbbd5",
                "timestamp": 1756513775994,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                "name": "Execution Act",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "execution",
                      "act"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "fda62008-92d4-4b01-8d30-49e89de6c8ac",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Execution endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validateExecutionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                        "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                        "      }",
                        "      validateExecutionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExecutionStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "82cdea91-4acf-4af8-91a0-5c101084cca2",
                "length": 12,
                "cycles": 1,
                "position": 3,
                "iteration": 0,
                "httpRequestId": "9ccea3ff-289f-4c84-a15d-8926659ab54b"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Execution endpoint responds",
                "message": "expected [ 200, 201, 202 ] to include undefined",
                "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)",
                "checksum": "a17a52898b3df8ea02adb03c3a698026",
                "id": "204db2af-d436-4938-8900-a44cde3a5749",
                "timestamp": 1756513775997,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 4,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                "name": "Execution Act",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "execution",
                      "act"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Execution endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validateExecutionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                        "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                        "      }",
                        "      validateExecutionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExecutionStatus(json);"
                      ],
                      "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "82cdea91-4acf-4af8-91a0-5c101084cca2",
                "length": 12,
                "cycles": 1,
                "position": 3,
                "iteration": 0,
                "httpRequestId": "9ccea3ff-289f-4c84-a15d-8926659ab54b",
                "scriptId": "887ced16-d112-4e23-a8d1-667b5c68b965",
                "execution": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "8a45f70a-0397-423c-97d1-24a3da8f2aa2",
                "timestamp": 1756513776598,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                "name": "Reasoning Plan",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "reasoning",
                      "plan"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "fdd65738-7ba0-401d-afde-d27048bba18b",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Reasoning plan endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validatePlanStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                        "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                        "      }",
                        "      validatePlanStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validatePlanStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "2b40a695-22ae-4825-a99a-bd3fba2432c7",
                "length": 12,
                "cycles": 1,
                "position": 4,
                "iteration": 0,
                "httpRequestId": "67a17bdc-bfc6-4a7d-9aab-9406c6de1bf8"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Reasoning plan endpoint responds",
                "message": "expected [ 200, 201, 202 ] to include undefined",
                "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)",
                "checksum": "c4df8cd7f9069dc0b3c50b95e2c87d5d",
                "id": "986a532c-3555-4a5d-b34d-7a11c90b1d9c",
                "timestamp": 1756513776614,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 5,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                "name": "Reasoning Plan",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "reasoning",
                      "plan"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Reasoning plan endpoint responds', function () {",
                        "  pm.expect([200,201,202]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                        "",
                        "function validatePlanStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                        "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                        "      }",
                        "      validatePlanStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validatePlanStatus(json);"
                      ],
                      "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "2b40a695-22ae-4825-a99a-bd3fba2432c7",
                "length": 12,
                "cycles": 1,
                "position": 4,
                "iteration": 0,
                "httpRequestId": "67a17bdc-bfc6-4a7d-9aab-9406c6de1bf8",
                "scriptId": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                "execution": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "add97728-2cf3-45b2-9224-33ffaec81ef4",
                "timestamp": 1756513777221,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                "name": "Consciousness Attention GET",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "attention"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "867ee15d-edec-4f33-95ef-627da17235d4",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Attention GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                        "",
                        "function validateAttentionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                        "      }",
                        "      validateAttentionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateAttentionStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "bb1c9f8c-23ee-418c-9da1-ed8cb4425d4d",
                "length": 12,
                "cycles": 1,
                "position": 5,
                "iteration": 0,
                "httpRequestId": "cdc79272-a1cf-4fe5-9c92-915865678fcb"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Attention GET endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)",
                "checksum": "c4d7660615412d72c5375fafc8a00680",
                "id": "5a6a9864-03c9-4601-bb24-94e208df70df",
                "timestamp": 1756513777238,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 6,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                "name": "Consciousness Attention GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "attention"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Attention GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                        "",
                        "function validateAttentionStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                        "      }",
                        "      validateAttentionStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateAttentionStatus(json);"
                      ],
                      "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "bb1c9f8c-23ee-418c-9da1-ed8cb4425d4d",
                "length": 12,
                "cycles": 1,
                "position": 5,
                "iteration": 0,
                "httpRequestId": "cdc79272-a1cf-4fe5-9c92-915865678fcb",
                "scriptId": "28cf0944-98d8-416c-bda4-df5578370d79",
                "execution": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "092715c6-060c-4ef6-906d-a0c6b84a6bfd",
                "timestamp": 1756513777837,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                "name": "Consciousness State GET",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "state"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "790315ec-14fc-4dda-a45f-e47b6dc93cac",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('State GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateConsciousnessState(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                        "      }",
                        "      validateConsciousnessState(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateConsciousnessState(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "0246b8d6-80f0-4221-9f02-5c6ec5c2401a",
                "length": 12,
                "cycles": 1,
                "position": 6,
                "iteration": 0,
                "httpRequestId": "fafc7600-1c9c-4101-92d5-75ead78f8c44"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "State GET endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)",
                "checksum": "32460a73164cbce4be96ffe84c3d35a2",
                "id": "1e0de8be-2b77-4590-9281-7ce1de45cf2d",
                "timestamp": 1756513777854,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 7,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                "name": "Consciousness State GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "consciousness",
                      "state"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('State GET endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateConsciousnessState(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                        "      }",
                        "      validateConsciousnessState(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateConsciousnessState(json);"
                      ],
                      "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "0246b8d6-80f0-4221-9f02-5c6ec5c2401a",
                "length": 12,
                "cycles": 1,
                "position": 6,
                "iteration": 0,
                "httpRequestId": "fafc7600-1c9c-4101-92d5-75ead78f8c44",
                "scriptId": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                "execution": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "77509a0c-5f7b-4d3d-a4e3-eb742e85068c",
                "timestamp": 1756513778459,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                "name": "Experience Rules POST",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "rules"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "f54917d5-9cb4-436e-8dad-c974dded49e7",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience rules POST endpoint responds', function () {",
                        "  pm.expect([200,201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateExperienceStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        // Experience rules can use 'active' (enable/disable semantics)",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                        "      }",
                        "      validateExperienceStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExperienceStatus(json);",
                        "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "501de7dc-28eb-4162-a6cd-ab829edff54b",
                "length": 12,
                "cycles": 1,
                "position": 7,
                "iteration": 0,
                "httpRequestId": "f7fd25a8-d1d1-45e4-bcb7-db365d389a80"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Experience rules POST endpoint responds",
                "message": "expected [ 200, 201 ] to include undefined",
                "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)",
                "checksum": "c19aa9a0ca242bf4ab8234bd4ecd203b",
                "id": "d0fefad2-055a-4e15-a01d-d8fa4effc5a9",
                "timestamp": 1756513778473,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 8,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                "name": "Experience Rules POST",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "rules"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience rules POST endpoint responds', function () {",
                        "  pm.expect([200,201]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateExperienceStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        // Experience rules can use 'active' (enable/disable semantics)",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                        "      }",
                        "      validateExperienceStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateExperienceStatus(json);",
                        "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "501de7dc-28eb-4162-a6cd-ab829edff54b",
                "length": 12,
                "cycles": 1,
                "position": 7,
                "iteration": 0,
                "httpRequestId": "f7fd25a8-d1d1-45e4-bcb7-db365d389a80",
                "scriptId": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                "execution": "00756fcc-6592-4097-a2ad-825d24110af5"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "a50c476d-6a05-4f51-b060-667c9d71f644",
                "timestamp": 1756513779077,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                "name": "Experience Candidates GET",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "candidates"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "aa0c7a9e-c652-488c-9556-7dd8d88491a0",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience candidates endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateCandidateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                        "      }",
                        "      validateCandidateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCandidateStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "7958cc9e-9a33-4123-b77f-b5ad01bd8a25",
                "length": 12,
                "cycles": 1,
                "position": 8,
                "iteration": 0,
                "httpRequestId": "c2b53f9b-54b4-40fe-908d-1671a38801b3"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Experience candidates endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)",
                "checksum": "2493e9505917af79f07ca947d06d997c",
                "id": "d398cd4b-6a6b-46ae-867d-43df64229664",
                "timestamp": 1756513779092,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 9,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                "name": "Experience Candidates GET",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "experience",
                      "candidates"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Experience candidates endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                        "",
                        "function validateCandidateStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                        "      }",
                        "      validateCandidateStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCandidateStatus(json);"
                      ],
                      "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "7958cc9e-9a33-4123-b77f-b5ad01bd8a25",
                "length": 12,
                "cycles": 1,
                "position": 8,
                "iteration": 0,
                "httpRequestId": "c2b53f9b-54b4-40fe-908d-1671a38801b3",
                "scriptId": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                "execution": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "44468009-15d3-467f-afe7-44fcf55c2201",
                "timestamp": 1756513779695,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                "name": "Cloud Status",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "cloud",
                      "status"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [
                      {
                        "key": "user_id",
                        "value": "test-user"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "3e9af920-dd20-423d-a4de-3334b5ae7421",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Cloud status endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                        "",
                        "function validateCloudStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                        "      }",
                        "      validateCloudStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCloudStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "d11c6f19-77bb-43ae-9a5a-dd2287e6b6a8",
                "length": 12,
                "cycles": 1,
                "position": 9,
                "iteration": 0,
                "httpRequestId": "eeb2cd68-acb2-43f8-807a-2b77d8266228"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Cloud status endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)",
                "checksum": "b97b7fbbb4e730567b8353d6576f2288",
                "id": "de403340-f721-469f-ab1d-019a79c2ee6a",
                "timestamp": 1756513779711,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 10,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                "name": "Cloud Status",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "cloud",
                      "status"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "user_id",
                        "value": "test-user"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Cloud status endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                        "",
                        "function validateCloudStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                        "      }",
                        "      validateCloudStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateCloudStatus(json);"
                      ],
                      "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "d11c6f19-77bb-43ae-9a5a-dd2287e6b6a8",
                "length": 12,
                "cycles": 1,
                "position": 9,
                "iteration": 0,
                "httpRequestId": "eeb2cd68-acb2-43f8-807a-2b77d8266228",
                "scriptId": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                "execution": "7b40129a-281b-4b31-809f-51deda1fd7cf"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "70acf4f9-87c3-4b06-b387-1967632b6417",
                "timestamp": 1756513780320,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                "name": "Observability Metrics",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "metrics"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "f86bdc60-0133-42de-9faa-e91253e2a452",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Metrics endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateMetricsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                        "      }",
                        "      validateMetricsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateMetricsStatus(json);",
                        "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "d0d65584-0b86-4876-bdd5-8892a64a3bf7",
                "length": 12,
                "cycles": 1,
                "position": 10,
                "iteration": 0,
                "httpRequestId": "c3f19673-273a-4e4f-9385-d1176de720bf"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Metrics endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)",
                "checksum": "5bcbdd8eed31a102f3a12ec66e17b275",
                "id": "ddbe435c-857b-4685-bb87-f0db085aff0e",
                "timestamp": 1756513780338,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 11,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                "name": "Observability Metrics",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "metrics"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Metrics endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateMetricsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                        "      }",
                        "      validateMetricsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateMetricsStatus(json);",
                        "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                      ],
                      "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "d0d65584-0b86-4876-bdd5-8892a64a3bf7",
                "length": 12,
                "cycles": 1,
                "position": 10,
                "iteration": 0,
                "httpRequestId": "c3f19673-273a-4e4f-9385-d1176de720bf",
                "scriptId": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                "execution": "7a087704-ee4f-4482-8ebe-700bce2606ab"
              }
            },
            {
              "error": {
                "errno": -4078,
                "code": "ECONNREFUSED",
                "syscall": "connect",
                "address": "127.0.0.1",
                "port": 8000,
                "name": "Error",
                "message": "connect ECONNREFUSED 127.0.0.1:8000",
                "stack": "Error: connect ECONNREFUSED 127.0.0.1:8000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
                "checksum": "fc59a70539da38d1ea1224cc6d2870af",
                "id": "01ecf834-1c13-4a6c-8e73-bed14ac7b26e",
                "timestamp": 1756513780943,
                "stacktrace": [
                  {
                    "fileName": "node:net",
                    "lineNumber": 1637,
                    "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
                    "typeName": "TCPConnectWrap",
                    "methodName": "afterConnect [as oncomplete]",
                    "columnNumber": 16,
                    "native": false
                  }
                ]
              },
              "at": "request",
              "source": {
                "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                "name": "Observability Logs Search",
                "request": {
                  "url": {
                    "protocol": "http",
                    "port": "8000",
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "logs",
                      "search"
                    ],
                    "host": [
                      "localhost"
                    ],
                    "query": [
                      {
                        "key": "q",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "User-Agent",
                      "value": "PostmanRuntime/7.39.1",
                      "system": true
                    },
                    {
                      "key": "Accept",
                      "value": "*/*",
                      "system": true
                    },
                    {
                      "key": "Cache-Control",
                      "value": "no-cache",
                      "system": true
                    },
                    {
                      "key": "Postman-Token",
                      "value": "a1f0eff7-8123-4b91-94ab-926be49d5217",
                      "system": true
                    },
                    {
                      "key": "Host",
                      "value": "localhost:8000",
                      "system": true
                    },
                    {
                      "key": "Accept-Encoding",
                      "value": "gzip, deflate, br",
                      "system": true
                    },
                    {
                      "key": "Connection",
                      "value": "keep-alive",
                      "system": true
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Logs search endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateLogsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                        "      }",
                        "      validateLogsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateLogsStatus(json);"
                      ]
                    }
                  }
                ]
              },
              "cursor": {
                "ref": "ecfb1d60-a32c-4a59-b384-673aaa6dde39",
                "length": 12,
                "cycles": 1,
                "position": 11,
                "iteration": 0,
                "httpRequestId": "8dbde467-272f-4d9d-8b7b-b49f266f8954"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 0,
                "test": "Logs search endpoint responds",
                "message": "expected [ 200 ] to include undefined",
                "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)",
                "checksum": "5ef92ff72d484bdb824c1be9787eec70",
                "id": "9651d0fc-e8de-46bc-aecb-747979d2e615",
                "timestamp": 1756513780959,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 1,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 12,
                    "native": false
                  }
                ]
              },
              "at": "assertion:0 in test-script",
              "source": {
                "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                "name": "Observability Logs Search",
                "request": {
                  "url": {
                    "path": [
                      "api",
                      "v2.3-preview",
                      "observability",
                      "logs",
                      "search"
                    ],
                    "host": [
                      "{{baseUrl}}"
                    ],
                    "query": [
                      {
                        "key": "q",
                        "value": "test"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test('Logs search endpoint responds', function () {",
                        "  pm.expect([200]).to.include(pm.response.code);",
                        "});",
                        "",
                        "let json = {};",
                        "try { json = pm.response.json(); } catch (e) { json = {}; }",
                        "",
                        "const DISALLOWED = new Set(['running','success','error']);",
                        "",
                        "function validateLogsStatus(obj) {",
                        "  if (obj === null || obj === undefined) return;",
                        "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                        "  if (typeof obj === 'object') {",
                        "    Object.keys(obj).forEach(k => {",
                        "      const v = obj[k];",
                        "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                        "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                        "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                        "      }",
                        "      validateLogsStatus(v);",
                        "    });",
                        "  }",
                        "}",
                        "validateLogsStatus(json);"
                      ],
                      "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                    }
                  }
                ]
              },
              "parent": {
                "item": [
                  {
                    "id": "447b4169-2d8e-4a3f-b091-26c9eb430010",
                    "name": "Agents Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "agents",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50867a90-f970-4bb3-97cf-1df79c70bcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Response is JSON', function () {",
                            "  pm.response.to.have.header('Content-Type');",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                            "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "d3fa4643-7963-4f1f-8566-d2b4167c4b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b2bc4b-d241-4eb2-a13f-324a984864a1",
                    "name": "Memory Sync (202 + CloudSyncJob)",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "sync"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "name": "Content-Type",
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f48c5-afd5-42a5-beb6-1b0b7738e9dc",
                          "type": "text/javascript",
                          "exec": [
                            "const status = pm.response.code;",
                            "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                            "  pm.expect([200,201,202,204]).to.include(status);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function scan(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                            "      }",
                            "      scan(v);",
                            "    });",
                            "  }",
                            "}",
                            "scan(json);",
                            "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "426585e4-e6e3-44c9-9018-cf864268db79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e2d6c-7336-45b6-8075-4ae68284f26b",
                    "name": "Memory Export",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "memory",
                          "export"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b69aaa7-c87f-41c8-b38a-05b467378d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Export endpoint responds successfully', function () {",
                            "  pm.expect([200,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                            "",
                            "function validateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                            "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                            "      }",
                            "      validateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateStatus(json);"
                          ],
                          "_lastExecutionId": "7df1e662-ad6c-45c9-8dd9-329445213610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6df8dba-b82b-4ef7-b745-f7f20a8fa05b",
                    "name": "Execution Act",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "execution",
                          "act"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887ced16-d112-4e23-a8d1-667b5c68b965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Execution endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validateExecutionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                            "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                            "      }",
                            "      validateExecutionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExecutionStatus(json);"
                          ],
                          "_lastExecutionId": "2e4ce1c4-1674-43ff-8189-74df6740ab16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba7ee05-02b0-4f15-a12e-4e176aca2f18",
                    "name": "Reasoning Plan",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "reasoning",
                          "plan"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2ba44a-9ae0-43db-be58-393ede5cdeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Reasoning plan endpoint responds', function () {",
                            "  pm.expect([200,201,202]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                            "",
                            "function validatePlanStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                            "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                            "      }",
                            "      validatePlanStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validatePlanStatus(json);"
                          ],
                          "_lastExecutionId": "f170c09d-b3c0-4c57-90ac-1e9aebd7edec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f5b001-cb15-4c4b-b0be-7a889777d517",
                    "name": "Consciousness Attention GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "attention"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cf0944-98d8-416c-bda4-df5578370d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Attention GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                            "",
                            "function validateAttentionStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                            "      }",
                            "      validateAttentionStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateAttentionStatus(json);"
                          ],
                          "_lastExecutionId": "a8111e6e-dd0f-401e-8ef2-c4519d61649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48436c66-ed1b-4d55-910c-cd8aad96348b",
                    "name": "Consciousness State GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "consciousness",
                          "state"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6d129-1aea-42d3-83c0-8b2895fdc195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('State GET endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateConsciousnessState(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                            "      }",
                            "      validateConsciousnessState(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateConsciousnessState(json);"
                          ],
                          "_lastExecutionId": "2c3cae70-bbcd-4a10-8ee3-f66a85cf4716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51704468-f844-4ba3-bcc6-3ef277176fa9",
                    "name": "Experience Rules POST",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "rules"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\"title\": \"test rule\", \"content\": \"test rule content\", \"category\": \"test\", \"tags\": [\"test\"], \"sources\": [\"integration_test\"]}"
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c14f5-1834-4027-be78-602ca92d3b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience rules POST endpoint responds', function () {",
                            "  pm.expect([200,201]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateExperienceStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        // Experience rules can use 'active' (enable/disable semantics)",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                            "      }",
                            "      validateExperienceStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateExperienceStatus(json);",
                            "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "00756fcc-6592-4097-a2ad-825d24110af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632e2e04-4530-4940-a29d-929ebbc59cc6",
                    "name": "Experience Candidates GET",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "experience",
                          "candidates"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab1188d-e57c-48c4-9264-045a6ffd0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Experience candidates endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                            "",
                            "function validateCandidateStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                            "      }",
                            "      validateCandidateStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCandidateStatus(json);"
                          ],
                          "_lastExecutionId": "5ac65d14-3118-43f6-859b-3e1c24ec8b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32873df3-c839-4e5c-a679-9e78d7d7a9ab",
                    "name": "Cloud Status",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "cloud",
                          "status"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "user_id",
                            "value": "test-user"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "538fefcb-9576-4b09-adc2-a81bb28a4f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Cloud status endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                            "",
                            "function validateCloudStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                            "      }",
                            "      validateCloudStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateCloudStatus(json);"
                          ],
                          "_lastExecutionId": "7b40129a-281b-4b31-809f-51deda1fd7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34a32e8-1cc3-4cb7-80c6-8bf76440bcc5",
                    "name": "Observability Metrics",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "metrics"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426edecc-d8d8-44ec-9fa3-80c58cf67451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Metrics endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateMetricsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                            "      }",
                            "      validateMetricsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateMetricsStatus(json);",
                            "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                          ],
                          "_lastExecutionId": "7a087704-ee4f-4482-8ebe-700bce2606ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26edf988-d231-48be-a3d7-b284bc5a2f08",
                    "name": "Observability Logs Search",
                    "request": {
                      "url": {
                        "path": [
                          "api",
                          "v2.3-preview",
                          "observability",
                          "logs",
                          "search"
                        ],
                        "host": [
                          "{{baseUrl}}"
                        ],
                        "query": [
                          {
                            "key": "q",
                            "value": "test"
                          }
                        ],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test('Logs search endpoint responds', function () {",
                            "  pm.expect([200]).to.include(pm.response.code);",
                            "});",
                            "",
                            "let json = {};",
                            "try { json = pm.response.json(); } catch (e) { json = {}; }",
                            "",
                            "const DISALLOWED = new Set(['running','success','error']);",
                            "",
                            "function validateLogsStatus(obj) {",
                            "  if (obj === null || obj === undefined) return;",
                            "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                            "  if (typeof obj === 'object') {",
                            "    Object.keys(obj).forEach(k => {",
                            "      const v = obj[k];",
                            "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                            "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                            "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                            "      }",
                            "      validateLogsStatus(v);",
                            "    });",
                            "  }",
                            "}",
                            "validateLogsStatus(json);"
                          ],
                          "_lastExecutionId": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "5a2b330a-bb11-411d-a323-e86e9683b61a",
                  "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
                  "description": {
                    "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
                    "type": "text/plain"
                  }
                }
              },
              "cursor": {
                "ref": "ecfb1d60-a32c-4a59-b384-673aaa6dde39",
                "length": 12,
                "cycles": 1,
                "position": 11,
                "iteration": 0,
                "httpRequestId": "8dbde467-272f-4d9d-8b7b-b49f266f8954",
                "scriptId": "b6acec59-f322-4c28-b7b8-a5401c837a51",
                "execution": "8eb07ab5-0b12-4754-bdad-a4cc26a5c5ad"
              }
            }
          ],
          "error": null
        }
      },
      "effective_env": {
        "baseUrl": "http://localhost:8000"
      },
      "newman_detected": true
    }
  ]
}