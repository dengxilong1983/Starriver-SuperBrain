{
  "collection": {
    "item": [
      {
        "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
        "name": "Agents Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Response is JSON', function () {",
                "  pm.response.to.have.header('Content-Type');",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
            }
          }
        ]
      },
      {
        "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
        "name": "Memory Sync (202 + CloudSyncJob)",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
              "type": "text/javascript",
              "exec": [
                "const status = pm.response.code;",
                "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                "  pm.expect([200,201,202,204]).to.include(status);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
            }
          }
        ]
      },
      {
        "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
        "name": "Memory Export",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
              "type": "text/javascript",
              "exec": [
                "pm.test('Export endpoint responds successfully', function () {",
                "  pm.expect([200,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function validateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                "      }",
                "      validateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateStatus(json);"
              ],
              "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
            }
          }
        ]
      },
      {
        "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
        "name": "Execution Act",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
              "type": "text/javascript",
              "exec": [
                "pm.test('Execution endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validateExecutionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                "      }",
                "      validateExecutionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExecutionStatus(json);"
              ],
              "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
            }
          }
        ]
      },
      {
        "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
        "name": "Reasoning Plan",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
              "type": "text/javascript",
              "exec": [
                "pm.test('Reasoning plan endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validatePlanStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                "      }",
                "      validatePlanStatus(v);",
                "    });",
                "  }",
                "}",
                "validatePlanStatus(json);"
              ],
              "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
            }
          }
        ]
      },
      {
        "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
        "name": "Consciousness Attention GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
              "type": "text/javascript",
              "exec": [
                "pm.test('Attention GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                "",
                "function validateAttentionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                "      }",
                "      validateAttentionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateAttentionStatus(json);"
              ],
              "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
            }
          }
        ]
      },
      {
        "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
        "name": "Consciousness State GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
              "type": "text/javascript",
              "exec": [
                "pm.test('State GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateConsciousnessState(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                "      }",
                "      validateConsciousnessState(v);",
                "    });",
                "  }",
                "}",
                "validateConsciousnessState(json);"
              ],
              "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
            }
          }
        ]
      },
      {
        "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
        "name": "Experience Rules POST",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "23970d12-cb26-471a-8728-cb06f66912b8",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience rules POST endpoint responds', function () {",
                "  pm.expect([200,201]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateExperienceStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        // Experience rules can use 'active' (enable/disable semantics)",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                "      }",
                "      validateExperienceStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExperienceStatus(json);",
                "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
            }
          }
        ]
      },
      {
        "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
        "name": "Experience Candidates GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience candidates endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateCandidateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                "      }",
                "      validateCandidateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCandidateStatus(json);"
              ],
              "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
            }
          }
        ]
      },
      {
        "id": "2b08c632-5439-4953-8446-aa2611023b8e",
        "name": "Cloud Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "408a25af-8795-4778-a486-7fcae6e48484",
              "type": "text/javascript",
              "exec": [
                "pm.test('Cloud status endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                "",
                "function validateCloudStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                "      }",
                "      validateCloudStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCloudStatus(json);"
              ],
              "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
            }
          }
        ]
      },
      {
        "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
        "name": "Observability Metrics",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
              "type": "text/javascript",
              "exec": [
                "pm.test('Metrics endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateMetricsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                "      }",
                "      validateMetricsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateMetricsStatus(json);",
                "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
            }
          }
        ]
      },
      {
        "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
        "name": "Observability Logs Search",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
              "type": "text/javascript",
              "exec": [
                "pm.test('Logs search endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateLogsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                "      }",
                "      validateLogsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateLogsStatus(json);"
              ],
              "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
      "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-21T00:00:00Z",
      "postman_exported_using": "Postman/10.x"
    },
    "id": "6c9aa881-c03f-464d-9798-9aa0ffa0dfb4",
    "name": "v2.3-preview-env",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:4010",
        "key": "BASE_URL"
      },
      {
        "type": "any",
        "value": "",
        "key": "TOKEN"
      },
      {
        "type": "any",
        "value": "",
        "key": "IDEMPOTENCY_KEY"
      },
      {
        "type": "any",
        "value": "",
        "key": "X_REQUEST_ID"
      },
      {
        "type": "any",
        "value": "",
        "key": "TASK_ID"
      },
      {
        "type": "any",
        "value": "",
        "key": "TRACE_ID"
      }
    ]
  },
  "globals": {
    "id": "0c174edf-01f2-46a0-9ea3-0bf21f82b8b5",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 12
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 12
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756370851126,
      "completed": 1756370858503
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f2d75d06-ae71-45b6-93b6-575c69afee17",
          "httpRequestId": "116ddd73-b655-4af5-bbd3-af7ab3499204"
        },
        "item": {
          "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aef6570d-8aba-4352-b014-aad4b1e10412",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Response is JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is JSON",
              "message": "expected response to have header with key 'Content-Type'",
              "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Agent health status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "11447270-1c49-4b37-8333-c09d400fdd80",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2c346886-8c47-420e-ae05-e756865cfaef"
        },
        "item": {
          "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fbbce070-0f56-4e25-a5b6-e34b1c049444",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Accepted (202) or OK (200/201/204) for sync endpoint",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
              "message": "expected [ 200, 201, 202, 204 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "CloudSyncJob status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ac35efbc-732f-4328-b36d-6bc641a0bb60",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "02179016-eb9a-4a83-b3db-d39dab9eb465"
        },
        "item": {
          "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9151584e-09f8-4421-ace3-d78c5a04b79a",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Export endpoint responds successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Export endpoint responds successfully",
              "message": "expected [ 200, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "eb04eb3a-49f0-4c24-9870-f3af25a28a20",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74f66fa0-3d32-4303-b936-55d2c7ecba07"
        },
        "item": {
          "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "003bc956-eaee-4724-bec2-efccbf5422ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Execution endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Execution endpoint responds",
              "message": "expected [ 200, 201, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2ffb054f-edfc-40ce-80a5-4dac4427a9b2",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "989abc32-8455-466b-aae5-ab2e0138c40f"
        },
        "item": {
          "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d320447-500f-4048-bdab-d99f1b7e80d8",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Reasoning plan endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Reasoning plan endpoint responds",
              "message": "expected [ 200, 201, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7ff73654-0f26-4dd1-8750-48a83093865c",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d7adceac-d34c-4e2d-a1b8-6f8d5e8f1d44"
        },
        "item": {
          "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19c1c3bd-083f-4913-8cb7-860f9511b093",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Attention GET endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Attention GET endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "29961ce3-fa03-44eb-a5e7-4157491dbf06",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba548e2d-b410-4944-99f3-88884cbd5f36"
        },
        "item": {
          "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5aec16a1-9b67-4222-ae2d-84ad542b01c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "State GET endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "State GET endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a3e26b6b-4526-44bc-9227-b420c3b7ba6b",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67cbe93a-8fa7-4983-8e06-8915a0ef1fbd"
        },
        "item": {
          "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4478813f-1652-4656-808e-c3694e749631",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Experience rules POST endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience rules POST endpoint responds",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Experience rule status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e836f27f-9337-4945-9ac2-cdb38f85151f",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "655a97ad-f794-450b-99e6-1267c6bba856"
        },
        "item": {
          "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf0e0a45-c75a-4fb9-9827-a71ee557f1b4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Experience candidates endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience candidates endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e899cd9c-4ba3-43e0-9889-633fb3067d0c",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbadb6b3-2dd5-467e-a20f-7a5398967aa7"
        },
        "item": {
          "id": "2b08c632-5439-4953-8446-aa2611023b8e",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "408a25af-8795-4778-a486-7fcae6e48484",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9811c177-c08d-4186-8ff8-7dd7b8ea04c0",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "2b08c632-5439-4953-8446-aa2611023b8e",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Cloud status endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cloud status endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "93d39329-41d7-4db9-9edf-526027263d2b",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0d850c5-6d3e-4739-8199-1d69366c8a7d"
        },
        "item": {
          "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc4c82c4-40a6-429b-bc83-cbb043115aeb",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Metrics endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Metrics endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Metrics status validation completed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d144a356-6ef7-4027-ad43-164755ae9ad7",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6c95d790-ec6b-4ad5-bbd5-6cf8303eb7d2"
        },
        "item": {
          "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1ba0026-fa6b-4d61-ab62-550a15c3d50f",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Logs search endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logs search endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "e86041f0-8645-4573-923a-48640e9b680d",
          "timestamp": 1756370851699,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
          "name": "Agents Status",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "aef6570d-8aba-4352-b014-aad4b1e10412",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f2d75d06-ae71-45b6-93b6-575c69afee17",
          "httpRequestId": "116ddd73-b655-4af5-bbd3-af7ab3499204"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is JSON",
          "message": "expected response to have header with key 'Content-Type'",
          "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "d4d0ba5fa0e47d6c6ecf1fc4157edd5a",
          "id": "103a861c-5be1-430d-9e54-615208d8c739",
          "timestamp": 1756370851711,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f2d75d06-ae71-45b6-93b6-575c69afee17",
          "httpRequestId": "116ddd73-b655-4af5-bbd3-af7ab3499204",
          "scriptId": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
          "execution": "568a9652-abbc-4730-8fc4-7c1f71279983"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "e180bbce-96f7-48a6-b43a-b9608a59f67e",
          "timestamp": 1756370852305,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "fbbce070-0f56-4e25-a5b6-e34b1c049444",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "11447270-1c49-4b37-8333-c09d400fdd80",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2c346886-8c47-420e-ae05-e756865cfaef"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
          "message": "expected [ 200, 201, 202, 204 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "5de7bae6b1fc39a5c7260d76508ef4fe",
          "id": "5237cc87-dcf9-4ba2-8cf4-ca078be00b8f",
          "timestamp": 1756370852320,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "11447270-1c49-4b37-8333-c09d400fdd80",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2c346886-8c47-420e-ae05-e756865cfaef",
          "scriptId": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
          "execution": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "f81f660d-57e3-46f3-be1f-7c8c3aaf6dfa",
          "timestamp": 1756370852928,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
          "name": "Memory Export",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9151584e-09f8-4421-ace3-d78c5a04b79a",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ac35efbc-732f-4328-b36d-6bc641a0bb60",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "02179016-eb9a-4a83-b3db-d39dab9eb465"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Export endpoint responds successfully",
          "message": "expected [ 200, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "f8b82eeff0b67ea8955f03e8f0f1e0da",
          "id": "bba03922-229d-4f73-a148-96215ef2e243",
          "timestamp": 1756370852946,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "ac35efbc-732f-4328-b36d-6bc641a0bb60",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "02179016-eb9a-4a83-b3db-d39dab9eb465",
          "scriptId": "7b0d1814-17e4-499e-a760-ed37e1239131",
          "execution": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "59593e88-cdfa-4e58-a22d-ebcf27db05eb",
          "timestamp": 1756370853545,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
          "name": "Execution Act",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "003bc956-eaee-4724-bec2-efccbf5422ee",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "eb04eb3a-49f0-4c24-9870-f3af25a28a20",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74f66fa0-3d32-4303-b936-55d2c7ecba07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Execution endpoint responds",
          "message": "expected [ 200, 201, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "a17a52898b3df8ea02adb03c3a698026",
          "id": "80dcd543-80ce-4880-9d34-016c568b49c2",
          "timestamp": 1756370853562,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "eb04eb3a-49f0-4c24-9870-f3af25a28a20",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74f66fa0-3d32-4303-b936-55d2c7ecba07",
          "scriptId": "a781a209-2493-46e5-9111-ccc5f6d4add0",
          "execution": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "21073ad8-b06d-4405-8648-2d203e5c5912",
          "timestamp": 1756370854172,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6d320447-500f-4048-bdab-d99f1b7e80d8",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "2ffb054f-edfc-40ce-80a5-4dac4427a9b2",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "989abc32-8455-466b-aae5-ab2e0138c40f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Reasoning plan endpoint responds",
          "message": "expected [ 200, 201, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "c4df8cd7f9069dc0b3c50b95e2c87d5d",
          "id": "4593d2a9-26a0-4216-973d-b64e82e95c4b",
          "timestamp": 1756370854189,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2ffb054f-edfc-40ce-80a5-4dac4427a9b2",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "989abc32-8455-466b-aae5-ab2e0138c40f",
          "scriptId": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
          "execution": "e26ac680-c8bf-4a54-9ced-68e909816b22"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "94c5b981-4827-4aa8-8092-68231ae8cf11",
          "timestamp": 1756370854780,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "19c1c3bd-083f-4913-8cb7-860f9511b093",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7ff73654-0f26-4dd1-8750-48a83093865c",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d7adceac-d34c-4e2d-a1b8-6f8d5e8f1d44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Attention GET endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "c4d7660615412d72c5375fafc8a00680",
          "id": "e20d13ee-ff2b-459d-9d3c-bc14cf357e69",
          "timestamp": 1756370854797,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7ff73654-0f26-4dd1-8750-48a83093865c",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d7adceac-d34c-4e2d-a1b8-6f8d5e8f1d44",
          "scriptId": "5d09a219-b71b-47eb-a4b2-22043117beb5",
          "execution": "fdec2601-f636-40e7-8c6f-6278e50b099c"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "a5488823-4e68-4b9f-92ab-d99b3664336c",
          "timestamp": 1756370855403,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "5aec16a1-9b67-4222-ae2d-84ad542b01c0",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "29961ce3-fa03-44eb-a5e7-4157491dbf06",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba548e2d-b410-4944-99f3-88884cbd5f36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "State GET endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "32460a73164cbce4be96ffe84c3d35a2",
          "id": "87d978e6-850f-4c03-8eb9-7c3f89902ed2",
          "timestamp": 1756370855405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "29961ce3-fa03-44eb-a5e7-4157491dbf06",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba548e2d-b410-4944-99f3-88884cbd5f36",
          "scriptId": "f113ff98-e2b4-4211-992c-396c4eadab17",
          "execution": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "f0ce9f27-f7a9-4046-9cd0-95d7a84b25dd",
          "timestamp": 1756370855993,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4478813f-1652-4656-808e-c3694e749631",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a3e26b6b-4526-44bc-9227-b420c3b7ba6b",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67cbe93a-8fa7-4983-8e06-8915a0ef1fbd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience rules POST endpoint responds",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "c19aa9a0ca242bf4ab8234bd4ecd203b",
          "id": "e1a2fa71-ab49-43d9-b868-28a4a6325e52",
          "timestamp": 1756370856009,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a3e26b6b-4526-44bc-9227-b420c3b7ba6b",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "67cbe93a-8fa7-4983-8e06-8915a0ef1fbd",
          "scriptId": "23970d12-cb26-471a-8728-cb06f66912b8",
          "execution": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "5f691aaf-cc35-4205-b40a-353d9399b219",
          "timestamp": 1756370856615,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "cf0e0a45-c75a-4fb9-9827-a71ee557f1b4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e836f27f-9337-4945-9ac2-cdb38f85151f",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "655a97ad-f794-450b-99e6-1267c6bba856"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience candidates endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "2493e9505917af79f07ca947d06d997c",
          "id": "8d1442ce-64ad-42c7-83be-06f36ffe7e16",
          "timestamp": 1756370856618,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e836f27f-9337-4945-9ac2-cdb38f85151f",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "655a97ad-f794-450b-99e6-1267c6bba856",
          "scriptId": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
          "execution": "5abe016e-690d-4508-b565-f34faa6e7fdf"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "0cceba95-b839-4d2f-b3d2-17cf0f881eca",
          "timestamp": 1756370857221,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2b08c632-5439-4953-8446-aa2611023b8e",
          "name": "Cloud Status",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9811c177-c08d-4186-8ff8-7dd7b8ea04c0",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "408a25af-8795-4778-a486-7fcae6e48484",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e899cd9c-4ba3-43e0-9889-633fb3067d0c",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbadb6b3-2dd5-467e-a20f-7a5398967aa7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cloud status endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "b97b7fbbb4e730567b8353d6576f2288",
          "id": "c23a44b0-f826-499a-baa3-3ec63c407c42",
          "timestamp": 1756370857240,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2b08c632-5439-4953-8446-aa2611023b8e",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "408a25af-8795-4778-a486-7fcae6e48484",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e899cd9c-4ba3-43e0-9889-633fb3067d0c",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbadb6b3-2dd5-467e-a20f-7a5398967aa7",
          "scriptId": "408a25af-8795-4778-a486-7fcae6e48484",
          "execution": "643491df-df95-4c15-ae19-17c78876e129"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "b91e04b0-cb60-4994-b172-73d84b5237b3",
          "timestamp": 1756370857839,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "dc4c82c4-40a6-429b-bc83-cbb043115aeb",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "93d39329-41d7-4db9-9edf-526027263d2b",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0d850c5-6d3e-4739-8199-1d69366c8a7d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Metrics endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "5bcbdd8eed31a102f3a12ec66e17b275",
          "id": "dfdca32a-276a-4601-9e97-9da4470cfa6c",
          "timestamp": 1756370857856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "93d39329-41d7-4db9-9edf-526027263d2b",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0d850c5-6d3e-4739-8199-1d69366c8a7d",
          "scriptId": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
          "execution": "28c4412c-3851-41cb-92c2-85f6586623d8"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "b442fc46-5668-4d69-9fef-da060949b4ea",
          "timestamp": 1756370858461,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f1ba0026-fa6b-4d61-ab62-550a15c3d50f",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d144a356-6ef7-4027-ad43-164755ae9ad7",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6c95d790-ec6b-4ad5-bbd5-6cf8303eb7d2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logs search endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5ef92ff72d484bdb824c1be9787eec70",
          "id": "3aa685c0-fbe6-40a2-b8d8-b83183f8a723",
          "timestamp": 1756370858475,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "522c70a8-4fc2-48f7-bfd4-6d35037461b8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4e5c863c-8f4a-47a0-8313-f124581a7ce8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "568a9652-abbc-4730-8fc4-7c1f71279983"
                  }
                }
              ]
            },
            {
              "id": "5943cbf6-f54a-4693-8fa4-669c265491e5",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4d08423-6e7d-4342-89d9-0be5bccbf02d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bb6f80a7-6292-40b4-bd28-d86c8fcdb132"
                  }
                }
              ]
            },
            {
              "id": "c1aeaa35-3628-4c59-a943-03d0ba0fc353",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b0d1814-17e4-499e-a760-ed37e1239131",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "8a7fdad5-3a42-431c-ae80-3f2b0d32b450"
                  }
                }
              ]
            },
            {
              "id": "dc11ad12-44ff-4e84-8e66-7c97f4b58af4",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a781a209-2493-46e5-9111-ccc5f6d4add0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "487ecb54-b88e-4874-b520-51ec8a1e4e58"
                  }
                }
              ]
            },
            {
              "id": "0c5382c0-9bcb-457d-a2c4-0c1df47011e6",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c48209a4-296b-4f72-ba6f-b339e3fedaa2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "e26ac680-c8bf-4a54-9ced-68e909816b22"
                  }
                }
              ]
            },
            {
              "id": "d6bfaf11-99b8-40f0-a5be-640e7a352233",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d09a219-b71b-47eb-a4b2-22043117beb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "fdec2601-f636-40e7-8c6f-6278e50b099c"
                  }
                }
              ]
            },
            {
              "id": "618a9a33-c26e-49b6-814d-d6a50e3ccf68",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f113ff98-e2b4-4211-992c-396c4eadab17",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "8e0c0318-9e4f-4aa7-9788-1228f08d98c7"
                  }
                }
              ]
            },
            {
              "id": "aec76a7c-cb00-4d14-9c64-5823e7f4c5fd",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23970d12-cb26-471a-8728-cb06f66912b8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "d7fb14a0-97a4-4459-b8d1-a5a54681bcda"
                  }
                }
              ]
            },
            {
              "id": "58581433-538f-4f68-a4bd-7c531ac2146b",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8832f3a4-bbc1-42dc-a667-1050bf2105de",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "5abe016e-690d-4508-b565-f34faa6e7fdf"
                  }
                }
              ]
            },
            {
              "id": "2b08c632-5439-4953-8446-aa2611023b8e",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "408a25af-8795-4778-a486-7fcae6e48484",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "643491df-df95-4c15-ae19-17c78876e129"
                  }
                }
              ]
            },
            {
              "id": "18c7af9a-c6b7-4e18-a4a6-c0f91fbe5efe",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3806a0c3-1f8d-4d85-bcd5-676ef7afb21e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "28c4412c-3851-41cb-92c2-85f6586623d8"
                  }
                }
              ]
            },
            {
              "id": "c4604cee-f565-4a25-81cf-22a47c9b4728",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8c5e1799-aa65-4015-93e1-72a74621679b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "e1d81254-1e47-4767-b948-d8ba7570df7d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "37abbbe3-a33a-4295-b748-156a666fdf8a",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d144a356-6ef7-4027-ad43-164755ae9ad7",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6c95d790-ec6b-4ad5-bbd5-6cf8303eb7d2",
          "scriptId": "8c5e1799-aa65-4015-93e1-72a74621679b",
          "execution": "e1d81254-1e47-4767-b948-d8ba7570df7d"
        }
      }
    ],
    "error": null
  }
}