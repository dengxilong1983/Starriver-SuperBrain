{
  "collection": {
    "item": [
      {
        "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
        "name": "Agents Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
              "type": "text/javascript",
              "exec": [
                "pm.test('Response is JSON', function () {",
                "  pm.response.to.have.header('Content-Type');",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
            }
          }
        ]
      },
      {
        "id": "b7950351-e4b2-4782-a653-98ee457d1836",
        "name": "Memory Sync (202 + CloudSyncJob)",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
              "type": "text/javascript",
              "exec": [
                "const status = pm.response.code;",
                "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                "  pm.expect([200,201,202,204]).to.include(status);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
            }
          }
        ]
      },
      {
        "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
        "name": "Memory Export",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
              "type": "text/javascript",
              "exec": [
                "pm.test('Export endpoint responds successfully', function () {",
                "  pm.expect([200,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function validateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                "      }",
                "      validateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateStatus(json);"
              ],
              "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
            }
          }
        ]
      },
      {
        "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
        "name": "Execution Act",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
              "type": "text/javascript",
              "exec": [
                "pm.test('Execution endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validateExecutionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                "      }",
                "      validateExecutionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExecutionStatus(json);"
              ],
              "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
            }
          }
        ]
      },
      {
        "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
        "name": "Reasoning Plan",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9b479859-c3da-4552-94c4-526b5f089305",
              "type": "text/javascript",
              "exec": [
                "pm.test('Reasoning plan endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validatePlanStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                "      }",
                "      validatePlanStatus(v);",
                "    });",
                "  }",
                "}",
                "validatePlanStatus(json);"
              ],
              "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
            }
          }
        ]
      },
      {
        "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
        "name": "Consciousness Attention GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
              "type": "text/javascript",
              "exec": [
                "pm.test('Attention GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                "",
                "function validateAttentionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                "      }",
                "      validateAttentionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateAttentionStatus(json);"
              ],
              "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
            }
          }
        ]
      },
      {
        "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
        "name": "Consciousness State GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
              "type": "text/javascript",
              "exec": [
                "pm.test('State GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateConsciousnessState(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                "      }",
                "      validateConsciousnessState(v);",
                "    });",
                "  }",
                "}",
                "validateConsciousnessState(json);"
              ],
              "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
            }
          }
        ]
      },
      {
        "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
        "name": "Experience Rules POST",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience rules POST endpoint responds', function () {",
                "  pm.expect([200,201]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateExperienceStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        // Experience rules can use 'active' (enable/disable semantics)",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                "      }",
                "      validateExperienceStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExperienceStatus(json);",
                "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
            }
          }
        ]
      },
      {
        "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
        "name": "Experience Candidates GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience candidates endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateCandidateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                "      }",
                "      validateCandidateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCandidateStatus(json);"
              ],
              "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
            }
          }
        ]
      },
      {
        "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
        "name": "Cloud Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
              "type": "text/javascript",
              "exec": [
                "pm.test('Cloud status endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                "",
                "function validateCloudStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                "      }",
                "      validateCloudStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCloudStatus(json);"
              ],
              "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
            }
          }
        ]
      },
      {
        "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
        "name": "Observability Metrics",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
              "type": "text/javascript",
              "exec": [
                "pm.test('Metrics endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateMetricsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                "      }",
                "      validateMetricsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateMetricsStatus(json);",
                "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
            }
          }
        ]
      },
      {
        "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
        "name": "Observability Logs Search",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
              "type": "text/javascript",
              "exec": [
                "pm.test('Logs search endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateLogsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                "      }",
                "      validateLogsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateLogsStatus(json);"
              ],
              "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
      "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-21T00:00:00Z",
      "postman_exported_using": "Postman/10.x"
    },
    "id": "0c8b6976-4254-4816-b5e2-6714a22e96ec",
    "name": "v2.3-preview-env",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:4010",
        "key": "BASE_URL"
      },
      {
        "type": "any",
        "value": "",
        "key": "TOKEN"
      },
      {
        "type": "any",
        "value": "",
        "key": "IDEMPOTENCY_KEY"
      },
      {
        "type": "any",
        "value": "",
        "key": "X_REQUEST_ID"
      },
      {
        "type": "any",
        "value": "",
        "key": "TASK_ID"
      },
      {
        "type": "any",
        "value": "",
        "key": "TRACE_ID"
      }
    ]
  },
  "globals": {
    "id": "8a82c9f2-0683-456f-92ac-7f32546252b2",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 12
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 12
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756370536383,
      "completed": 1756370543626
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f3fcb2c4-1f79-4fce-a988-4ddb65dc3319",
          "httpRequestId": "a6ead55e-753f-413e-bc32-2ecf2a9d9544"
        },
        "item": {
          "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "92199587-e634-42d9-959b-ed22c8beefeb",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Response is JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is JSON",
              "message": "expected response to have header with key 'Content-Type'",
              "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Agent health status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d6cd7c39-6eb2-4fed-8ac7-5fd320a15ac7",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5e0593f8-b323-44d5-bbfe-be5509b61d2b"
        },
        "item": {
          "id": "b7950351-e4b2-4782-a653-98ee457d1836",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1204f630-5c4f-468c-821d-cb7594a8ad75",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "id": "b7950351-e4b2-4782-a653-98ee457d1836",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Accepted (202) or OK (200/201/204) for sync endpoint",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
              "message": "expected [ 200, 201, 202, 204 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "CloudSyncJob status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8d845797-88ba-4afe-9ea3-9c7c395bb820",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9582b538-6fdb-414c-bd98-f8276b63dd5c"
        },
        "item": {
          "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b58a3fda-a11d-47fc-9bfc-88d1547b0eb5",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Export endpoint responds successfully",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Export endpoint responds successfully",
              "message": "expected [ 200, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "819574b3-a297-49dd-b2b7-0215e0cb1f70",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "078676f8-9cb5-46b5-8d62-812e1cee1655"
        },
        "item": {
          "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2d7a27c9-85d6-48c0-8807-589d6f7f840c",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Execution endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Execution endpoint responds",
              "message": "expected [ 200, 201, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c098a86e-c02b-45a0-88f9-d59b40207322",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5eeed624-6758-4b44-8f92-e5e46bb8b4a9"
        },
        "item": {
          "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b479859-c3da-4552-94c4-526b5f089305",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2a39c2cd-9a26-40b2-8173-125d0ac09631",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Reasoning plan endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Reasoning plan endpoint responds",
              "message": "expected [ 200, 201, 202 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f98852a3-b2b2-4c2a-b3a6-60472f0597a4",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0dc756e9-a016-4a81-97d9-7b4fed7a855a"
        },
        "item": {
          "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb4d2a09-cc8d-4719-a0cf-8b047c60d7d4",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Attention GET endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Attention GET endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "001e4b03-ce22-439b-8765-198504bc2d2e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9514c1f8-6f6b-419f-b1e8-c2f00cd09ef8"
        },
        "item": {
          "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bdc173e2-c66a-4b7b-9b4b-29636ae1d150",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "State GET endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "State GET endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd2e35a7-095a-44d9-9ded-1985c1fb27a4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "179fc329-116e-418a-a51d-eace99621f47"
        },
        "item": {
          "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "18982f77-565c-4fbc-aa85-9f64c64ae577",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Experience rules POST endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience rules POST endpoint responds",
              "message": "expected [ 200, 201 ] to include undefined",
              "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Experience rule status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9e20329-c5b2-4dcc-a0dd-ff0de84fa8a2",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eee3d26a-a27b-4cb3-8780-dad19b511052"
        },
        "item": {
          "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "deb6f9a2-7174-4e46-ba7a-67b585bd41c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Experience candidates endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience candidates endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f21951d-659d-40c6-91bc-133cbc8e3618",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec685835-07a5-43bf-9f71-205f49fed88c"
        },
        "item": {
          "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "597a1e77-aebf-4c84-b50d-540aec64a020",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Cloud status endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cloud status endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "00f19786-f961-4f7c-be45-d53ddd620f9a",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0de9edf6-253c-4cd6-b085-f5d3c1daaf71"
        },
        "item": {
          "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d52cc153-f0c9-437e-8608-4e3dd4cac440",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Metrics endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Metrics endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Metrics status validation completed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ed3581d-a118-4f36-b7b3-47ed39ccd612",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de046de9-4524-4b98-9173-ab6cca55dec8"
        },
        "item": {
          "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseurl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2a885fcf-c39e-48a6-96a5-8cdb832e50c6",
              "system": true
            },
            {
              "key": "Host",
              "value": "{{baseurl}}",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
        "requestError": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}"
        },
        "assertions": [
          {
            "assertion": "Logs search endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Logs search endpoint responds",
              "message": "expected [ 200 ] to include undefined",
              "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "e745827b-8551-4ece-96e0-69101676399b",
          "timestamp": 1756370536955,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
          "name": "Agents Status",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "92199587-e634-42d9-959b-ed22c8beefeb",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f3fcb2c4-1f79-4fce-a988-4ddb65dc3319",
          "httpRequestId": "a6ead55e-753f-413e-bc32-2ecf2a9d9544"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is JSON",
          "message": "expected response to have header with key 'Content-Type'",
          "stack": "AssertionError: expected response to have header with key 'Content-Type'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "d4d0ba5fa0e47d6c6ecf1fc4157edd5a",
          "id": "d6ed56d6-ae1f-4ae6-a354-9e82358e4893",
          "timestamp": 1756370536967,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f3fcb2c4-1f79-4fce-a988-4ddb65dc3319",
          "httpRequestId": "a6ead55e-753f-413e-bc32-2ecf2a9d9544",
          "scriptId": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
          "execution": "19b20c22-59c7-449d-ad90-e4d256f05119"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "21030382-253c-458a-8424-d6c684adabec",
          "timestamp": 1756370537566,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b7950351-e4b2-4782-a653-98ee457d1836",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "1204f630-5c4f-468c-821d-cb7594a8ad75",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d6cd7c39-6eb2-4fed-8ac7-5fd320a15ac7",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5e0593f8-b323-44d5-bbfe-be5509b61d2b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Accepted (202) or OK (200/201/204) for sync endpoint",
          "message": "expected [ 200, 201, 202, 204 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202, 204 ] to include undefined\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "5de7bae6b1fc39a5c7260d76508ef4fe",
          "id": "7db76200-31a1-46f8-9839-249dd85f7abc",
          "timestamp": 1756370537581,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b7950351-e4b2-4782-a653-98ee457d1836",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "d6cd7c39-6eb2-4fed-8ac7-5fd320a15ac7",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5e0593f8-b323-44d5-bbfe-be5509b61d2b",
          "scriptId": "05865d52-b3c3-4356-bde2-4857bf86a95d",
          "execution": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "4badcf38-a145-4e05-a1e2-93f529f8a6d8",
          "timestamp": 1756370538163,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
          "name": "Memory Export",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b58a3fda-a11d-47fc-9bfc-88d1547b0eb5",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8d845797-88ba-4afe-9ea3-9c7c395bb820",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9582b538-6fdb-414c-bd98-f8276b63dd5c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Export endpoint responds successfully",
          "message": "expected [ 200, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "f8b82eeff0b67ea8955f03e8f0f1e0da",
          "id": "d2dfbaf5-7616-4483-a031-1d924367c81e",
          "timestamp": 1756370538178,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "8d845797-88ba-4afe-9ea3-9c7c395bb820",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9582b538-6fdb-414c-bd98-f8276b63dd5c",
          "scriptId": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
          "execution": "557e74e2-5149-4de5-9464-15bc9e6d052f"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "43c44bc4-6af8-4199-aa12-276b29fdffa1",
          "timestamp": 1756370538774,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
          "name": "Execution Act",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2d7a27c9-85d6-48c0-8807-589d6f7f840c",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "819574b3-a297-49dd-b2b7-0215e0cb1f70",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "078676f8-9cb5-46b5-8d62-812e1cee1655"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Execution endpoint responds",
          "message": "expected [ 200, 201, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "a17a52898b3df8ea02adb03c3a698026",
          "id": "2e6a7847-cb4b-4ee1-a935-7dc571bdc51d",
          "timestamp": 1756370538787,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "819574b3-a297-49dd-b2b7-0215e0cb1f70",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "078676f8-9cb5-46b5-8d62-812e1cee1655",
          "scriptId": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
          "execution": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "3f990262-1cfd-400f-819d-98fcd5df0786",
          "timestamp": 1756370539369,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2a39c2cd-9a26-40b2-8173-125d0ac09631",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b479859-c3da-4552-94c4-526b5f089305",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c098a86e-c02b-45a0-88f9-d59b40207322",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5eeed624-6758-4b44-8f92-e5e46bb8b4a9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Reasoning plan endpoint responds",
          "message": "expected [ 200, 201, 202 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201, 202 ] to include undefined\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "c4df8cd7f9069dc0b3c50b95e2c87d5d",
          "id": "bdfe0390-9f62-492e-9759-4bce69d63676",
          "timestamp": 1756370539385,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9b479859-c3da-4552-94c4-526b5f089305",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "c098a86e-c02b-45a0-88f9-d59b40207322",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5eeed624-6758-4b44-8f92-e5e46bb8b4a9",
          "scriptId": "9b479859-c3da-4552-94c4-526b5f089305",
          "execution": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "2e19455d-41a4-4cb5-9f14-2eb863d74371",
          "timestamp": 1756370539980,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "eb4d2a09-cc8d-4719-a0cf-8b047c60d7d4",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f98852a3-b2b2-4c2a-b3a6-60472f0597a4",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0dc756e9-a016-4a81-97d9-7b4fed7a855a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Attention GET endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "c4d7660615412d72c5375fafc8a00680",
          "id": "d730ca01-d539-453d-bd56-217a522d8608",
          "timestamp": 1756370539984,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "f98852a3-b2b2-4c2a-b3a6-60472f0597a4",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0dc756e9-a016-4a81-97d9-7b4fed7a855a",
          "scriptId": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
          "execution": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "1a413ce4-6085-4c1b-b9ff-ad44a0b89bc9",
          "timestamp": 1756370540568,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bdc173e2-c66a-4b7b-9b4b-29636ae1d150",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "001e4b03-ce22-439b-8765-198504bc2d2e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9514c1f8-6f6b-419f-b1e8-c2f00cd09ef8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "State GET endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "32460a73164cbce4be96ffe84c3d35a2",
          "id": "1bff1a53-03d9-4afb-9016-b220672583a3",
          "timestamp": 1756370540581,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "001e4b03-ce22-439b-8765-198504bc2d2e",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9514c1f8-6f6b-419f-b1e8-c2f00cd09ef8",
          "scriptId": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
          "execution": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "c0729037-7178-4aa5-acf3-da70d81c1db2",
          "timestamp": 1756370541177,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "18982f77-565c-4fbc-aa85-9f64c64ae577",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cd2e35a7-095a-44d9-9ded-1985c1fb27a4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "179fc329-116e-418a-a51d-eace99621f47"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience rules POST endpoint responds",
          "message": "expected [ 200, 201 ] to include undefined",
          "stack": "AssertionError: expected [ 200, 201 ] to include undefined\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "c19aa9a0ca242bf4ab8234bd4ecd203b",
          "id": "28f58571-7044-449b-943d-731d718d16f0",
          "timestamp": 1756370541189,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "cd2e35a7-095a-44d9-9ded-1985c1fb27a4",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "179fc329-116e-418a-a51d-eace99621f47",
          "scriptId": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
          "execution": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "48c23776-7985-4d82-8d64-fbd4f66e9d05",
          "timestamp": 1756370541777,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "deb6f9a2-7174-4e46-ba7a-67b585bd41c7",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a9e20329-c5b2-4dcc-a0dd-ff0de84fa8a2",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eee3d26a-a27b-4cb3-8780-dad19b511052"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience candidates endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "2493e9505917af79f07ca947d06d997c",
          "id": "3a353bb4-5f67-4a4f-8afa-22a64eb02876",
          "timestamp": 1756370541780,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "a9e20329-c5b2-4dcc-a0dd-ff0de84fa8a2",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eee3d26a-a27b-4cb3-8780-dad19b511052",
          "scriptId": "0a73600c-7bca-4b4f-8e23-714def990a82",
          "execution": "e00f0853-f089-4769-b881-8681605a9ba6"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "9e23600b-5f68-4e06-8462-2013346e2b8b",
          "timestamp": 1756370542362,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
          "name": "Cloud Status",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "597a1e77-aebf-4c84-b50d-540aec64a020",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3f21951d-659d-40c6-91bc-133cbc8e3618",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec685835-07a5-43bf-9f71-205f49fed88c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cloud status endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "b97b7fbbb4e730567b8353d6576f2288",
          "id": "d0496d77-bacd-4998-b12f-4a4e0500982a",
          "timestamp": 1756370542382,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "3f21951d-659d-40c6-91bc-133cbc8e3618",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ec685835-07a5-43bf-9f71-205f49fed88c",
          "scriptId": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
          "execution": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "9d0b59b1-7d27-41cb-866f-11c66da6ef7d",
          "timestamp": 1756370542975,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d52cc153-f0c9-437e-8608-4e3dd4cac440",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "00f19786-f961-4f7c-be45-d53ddd620f9a",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0de9edf6-253c-4cd6-b085-f5d3c1daaf71"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Metrics endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "5bcbdd8eed31a102f3a12ec66e17b275",
          "id": "3f8b6cfd-475b-4244-a315-52a2e772fe2c",
          "timestamp": 1756370542992,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "00f19786-f961-4f7c-be45-d53ddd620f9a",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0de9edf6-253c-4cd6-b085-f5d3c1daaf71",
          "scriptId": "d27d9e95-4f2b-490c-8444-b742e7920798",
          "execution": "b3e77455-30a7-4443-b728-0006ed0356ba"
        }
      },
      {
        "error": {
          "errno": -3008,
          "code": "ENOTFOUND",
          "syscall": "getaddrinfo",
          "hostname": "{{baseurl}}",
          "name": "Error",
          "message": "getaddrinfo ENOTFOUND {{baseurl}}",
          "stack": "Error: getaddrinfo ENOTFOUND {{baseurl}}\n    at GetAddrInfoReqWrap.onlookupall [as oncomplete] (node:dns:122:26)",
          "checksum": "952d6b65322837d644794aa5869aa649",
          "id": "e53b4e9c-28d9-4962-b321-62197a259f3e",
          "timestamp": 1756370543580,
          "stacktrace": [
            {
              "fileName": "node:dns",
              "lineNumber": 122,
              "functionName": "GetAddrInfoReqWrap.onlookupall [as oncomplete]",
              "typeName": "GetAddrInfoReqWrap",
              "methodName": "onlookupall [as oncomplete]",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "protocol": "http",
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseurl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2a885fcf-c39e-48a6-96a5-8cdb832e50c6",
                "system": true
              },
              {
                "key": "Host",
                "value": "{{baseurl}}",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "1ed3581d-a118-4f36-b7b3-47ed39ccd612",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de046de9-4524-4b98-9173-ab6cca55dec8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Logs search endpoint responds",
          "message": "expected [ 200 ] to include undefined",
          "stack": "AssertionError: expected [ 200 ] to include undefined\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "5ef92ff72d484bdb824c1be9787eec70",
          "id": "e99857b1-0107-4441-b322-25a9a316a721",
          "timestamp": 1756370543597,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "e1262d4b-c4f8-4ed2-8b23-d5c6459fa0a1",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed85a13-2991-4a92-a2ab-5718a8c48e49",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "19b20c22-59c7-449d-ad90-e4d256f05119"
                  }
                }
              ]
            },
            {
              "id": "b7950351-e4b2-4782-a653-98ee457d1836",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "05865d52-b3c3-4356-bde2-4857bf86a95d",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "c83c33c4-b9b7-4232-8311-6b5b992e0cc1"
                  }
                }
              ]
            },
            {
              "id": "da475de9-8cfc-4ec5-bb86-b61376cec709",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c5eb5b1f-a6c2-43d1-9f0c-44f0daba281f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "557e74e2-5149-4de5-9464-15bc9e6d052f"
                  }
                }
              ]
            },
            {
              "id": "8cfecb16-1b90-40ed-95af-ebd894493e15",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0fb30d8-c578-4cf8-a9e3-f7f9fd825359",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "e6fa1be8-674a-4d6b-a09a-71f549847cc7"
                  }
                }
              ]
            },
            {
              "id": "1741566d-11c4-4b0a-bc99-2c3f12b113b7",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9b479859-c3da-4552-94c4-526b5f089305",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "78b396d1-9327-45ae-aae0-96bb2d3ab2d8"
                  }
                }
              ]
            },
            {
              "id": "e9454e9b-a7e1-4930-9f94-8aa107599bc0",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dcde5202-53f0-4475-a739-5c1248d0bfe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "59ed4f9b-4765-42b2-9253-9b66f99fbf1e"
                  }
                }
              ]
            },
            {
              "id": "c0e3e94e-19c9-43e2-9649-bdaeb94b9ee0",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "02447a56-39b8-4a57-9d84-52a5d7a7b8f4",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "aa57d7ff-7935-4dab-bde4-4d42355679e1"
                  }
                }
              ]
            },
            {
              "id": "aaf43e38-2a62-438f-a6fa-23f9baaddffa",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "edb5bd7c-183b-4ae6-b481-4e158d465b3c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "57fd5b9d-0f22-4fc1-aec2-5ef872ac803d"
                  }
                }
              ]
            },
            {
              "id": "df29e45e-c4b3-4d3e-af64-ad35ce5482ec",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0a73600c-7bca-4b4f-8e23-714def990a82",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "e00f0853-f089-4769-b881-8681605a9ba6"
                  }
                }
              ]
            },
            {
              "id": "5d1355b6-39c8-4f05-975c-4d5366fced20",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3bd761ba-a195-4afc-bbcb-8207ac349a47",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "5feeae42-c098-462c-ab6a-8afd23c9f7ac"
                  }
                }
              ]
            },
            {
              "id": "311eab74-8d4f-43a0-82f4-1ca2f6d1d539",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d27d9e95-4f2b-490c-8444-b742e7920798",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "b3e77455-30a7-4443-b728-0006ed0356ba"
                  }
                }
              ]
            },
            {
              "id": "e3fd4e76-49de-4d31-9fb1-df3ffad426ec",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f03cf549-49cf-49f9-b808-246a41dd3413",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "c711d6e2-423b-446c-85dc-a302f27ab522"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "c01567db-5ced-43c1-9e6d-343075258de4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "1ed3581d-a118-4f36-b7b3-47ed39ccd612",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de046de9-4524-4b98-9173-ab6cca55dec8",
          "scriptId": "f03cf549-49cf-49f9-b808-246a41dd3413",
          "execution": "c711d6e2-423b-446c-85dc-a302f27ab522"
        }
      }
    ],
    "error": null
  }
}