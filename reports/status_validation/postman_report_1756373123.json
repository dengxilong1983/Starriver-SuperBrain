{
  "collection": {
    "item": [
      {
        "id": "4b526b97-e7e2-4f30-bf38-691750a8f9e8",
        "name": "Agents Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "70233ce5-6c29-4288-94be-4345aaff4dcb",
              "type": "text/javascript",
              "exec": [
                "pm.test('Response is JSON', function () {",
                "  pm.response.to.have.header('Content-Type');",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "548dbc1e-f48e-46a9-981d-dc226f3f6245"
            }
          }
        ]
      },
      {
        "id": "29cbbf57-d452-4403-a703-bf8f9442a11d",
        "name": "Memory Sync (202 + CloudSyncJob)",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e6fef221-982e-4976-8cf9-03c44486c654",
              "type": "text/javascript",
              "exec": [
                "const status = pm.response.code;",
                "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                "  pm.expect([200,201,202,204]).to.include(status);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "bd122a6f-1cf0-44df-8f00-3aa710a69d16"
            }
          }
        ]
      },
      {
        "id": "f4f221a5-3f47-4484-af8d-8b97ba8d63b1",
        "name": "Memory Export",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "bc0e3e04-317e-416e-9f32-a5d7ccc62a73",
              "type": "text/javascript",
              "exec": [
                "pm.test('Export endpoint responds successfully', function () {",
                "  pm.expect([200,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function validateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                "      }",
                "      validateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateStatus(json);"
              ],
              "_lastExecutionId": "ca324ee7-1ec9-490f-8160-9bd81f7d943d"
            }
          }
        ]
      },
      {
        "id": "206c3b00-b85f-47b7-b2d7-960012bd87a1",
        "name": "Execution Act",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "6291968a-656f-4a55-bd51-d42d281e6b36",
              "type": "text/javascript",
              "exec": [
                "pm.test('Execution endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validateExecutionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                "      }",
                "      validateExecutionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExecutionStatus(json);"
              ],
              "_lastExecutionId": "223cfa0d-4079-48ef-98a9-6234056b5295"
            }
          }
        ]
      },
      {
        "id": "ed14991a-3004-4f70-bd0b-410284ae5e62",
        "name": "Reasoning Plan",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "90dce111-4b8e-4ee5-a060-da9c49cab931",
              "type": "text/javascript",
              "exec": [
                "pm.test('Reasoning plan endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validatePlanStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                "      }",
                "      validatePlanStatus(v);",
                "    });",
                "  }",
                "}",
                "validatePlanStatus(json);"
              ],
              "_lastExecutionId": "c99605c8-6526-4994-b54e-991a586de78d"
            }
          }
        ]
      },
      {
        "id": "c5be3d0d-511b-4c66-839a-bf3ea94f0300",
        "name": "Consciousness Attention GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7fcb7c0d-445f-49f7-9992-986713da44b9",
              "type": "text/javascript",
              "exec": [
                "pm.test('Attention GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                "",
                "function validateAttentionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                "      }",
                "      validateAttentionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateAttentionStatus(json);"
              ],
              "_lastExecutionId": "a6cf9322-bacd-4c25-bb8c-0ac6fd606cdf"
            }
          }
        ]
      },
      {
        "id": "1386fc5c-7978-4a4a-9eba-7044e9dc5498",
        "name": "Consciousness State GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "74392697-da49-4c7a-8d5f-59bbfbb0c296",
              "type": "text/javascript",
              "exec": [
                "pm.test('State GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateConsciousnessState(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                "      }",
                "      validateConsciousnessState(v);",
                "    });",
                "  }",
                "}",
                "validateConsciousnessState(json);"
              ],
              "_lastExecutionId": "eb6a4d95-fb22-4ada-bbaf-0c7241d62def"
            }
          }
        ]
      },
      {
        "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
        "name": "Experience Rules POST",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "5f4340dc-0002-41f2-a154-c33db23d8789",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience rules POST endpoint responds', function () {",
                "  pm.expect([200,201]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateExperienceStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        // Experience rules can use 'active' (enable/disable semantics)",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                "      }",
                "      validateExperienceStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExperienceStatus(json);",
                "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
            }
          }
        ]
      },
      {
        "id": "47230e18-77a7-4a31-b714-559e828083a7",
        "name": "Experience Candidates GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3fe6373e-c02e-439e-90b6-f7e961110eba",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience candidates endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateCandidateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                "      }",
                "      validateCandidateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCandidateStatus(json);"
              ],
              "_lastExecutionId": "7b7a658d-0a30-416a-9ff1-ec61bf2fa7d3"
            }
          }
        ]
      },
      {
        "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
        "name": "Cloud Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
              "type": "text/javascript",
              "exec": [
                "pm.test('Cloud status endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                "",
                "function validateCloudStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                "      }",
                "      validateCloudStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCloudStatus(json);"
              ],
              "_lastExecutionId": "c310f845-e597-4a42-b758-19f15e528e71"
            }
          }
        ]
      },
      {
        "id": "af241e01-b7e3-408a-b809-cf6a04e5c061",
        "name": "Observability Metrics",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "74d40f10-e072-4bc7-94f5-09f24b7e5332",
              "type": "text/javascript",
              "exec": [
                "pm.test('Metrics endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateMetricsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                "      }",
                "      validateMetricsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateMetricsStatus(json);",
                "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "4972c9d5-fcce-4308-b8ff-7c788eb1f5c2"
            }
          }
        ]
      },
      {
        "id": "7a3dab9f-db83-4535-8feb-03af020ea405",
        "name": "Observability Logs Search",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "40de3fe1-d3e9-4b77-b4f7-7b4eb95365c1",
              "type": "text/javascript",
              "exec": [
                "pm.test('Logs search endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateLogsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                "      }",
                "      validateLogsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateLogsStatus(json);"
              ],
              "_lastExecutionId": "8fa9a7c8-aa59-48ea-a169-aa5c5d7af20e"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "036f1e57-b5c4-4c79-9dfb-e2b5cc7526d4",
      "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-28T08:00:00.000Z",
      "postman_exported_using": "Postman/10.x"
    },
    "id": "8f7b3a74-5c2f-4e15-9db0-1e5f2243e001",
    "name": "V2.3 Local",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "http://localhost:8000",
        "key": "BASE_URL"
      },
      {
        "type": "any",
        "value": "http://localhost:8000",
        "key": "baseurl"
      }
    ]
  },
  "globals": {
    "id": "197eb86b-31db-46ef-9eca-721b0b156a0e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 5.416666666666667,
      "responseMin": 2,
      "responseMax": 20,
      "responseSd": 4.536120466752275,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756373124634,
      "completed": 1756373132063
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4a586f74-7f4a-48a1-bd37-71ab05311ab3",
          "httpRequestId": "367d4b15-f1aa-4b7a-9e7f-91b6d252d0d1"
        },
        "item": {
          "id": "4b526b97-e7e2-4f30-bf38-691750a8f9e8",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70233ce5-6c29-4288-94be-4345aaff4dcb",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "548dbc1e-f48e-46a9-981d-dc226f3f6245"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6fec04ee-0c66-487a-b5f6-bcf8a76fd549",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "aeafb6dd-e2c3-40fe-a705-463c1cdda534",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "e07530d1-ce71-4fb8-84c1-10e73eab9259"
            },
            {
              "key": "content-length",
              "value": "86"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              101,
              48,
              55,
              53,
              51,
              48,
              100,
              49,
              45,
              99,
              101,
              55,
              49,
              45,
              52,
              102,
              98,
              56,
              45,
              56,
              52,
              99,
              49,
              45,
              49,
              48,
              101,
              55,
              51,
              101,
              97,
              98,
              57,
              50,
              53,
              57,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 20,
          "responseSize": 86
        },
        "id": "4b526b97-e7e2-4f30-bf38-691750a8f9e8",
        "assertions": [
          {
            "assertion": "Response is JSON",
            "skipped": false
          },
          {
            "assertion": "Agent health status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bcdd8a48-03e6-4443-b5ec-72c8594c9304",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "df4212df-9cb9-4a7e-ba74-e263da0ff2dd"
        },
        "item": {
          "id": "29cbbf57-d452-4403-a703-bf8f9442a11d",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6fef221-982e-4976-8cf9-03c44486c654",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "bd122a6f-1cf0-44df-8f00-3aa710a69d16"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c6495d94-3a76-4679-87c6-121e2f16e242",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "69",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": {
          "id": "7dd7c317-768f-404c-9bac-055e5a95d77f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "134"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "be9c7e04-8917-4d88-b2f1-8b433ad411e5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              121,
              110,
              99,
              101,
              100,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              44,
              34,
              102,
              97,
              105,
              108,
              101,
              100,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              98,
              53,
              98,
              57,
              102,
              53,
              100,
              56,
              45,
              97,
              53,
              57,
              51,
              45,
              52,
              102,
              50,
              98,
              45,
              97,
              52,
              99,
              101,
              45,
              49,
              48,
              98,
              52,
              48,
              48,
              52,
              56,
              101,
              102,
              53,
              51,
              34,
              44,
              34,
              102,
              105,
              110,
              105,
              115,
              104,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              50,
              53,
              58,
              50,
              53,
              46,
              56,
              52,
              51,
              48,
              55,
              48,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 134
        },
        "id": "29cbbf57-d452-4403-a703-bf8f9442a11d",
        "assertions": [
          {
            "assertion": "Accepted (202) or OK (200/201/204) for sync endpoint",
            "skipped": false
          },
          {
            "assertion": "CloudSyncJob status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "33862a6d-a24b-4149-81ab-292ea63e7ae4",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c41f7c5c-3f8d-4c54-9d5a-5aae9e2255c7"
        },
        "item": {
          "id": "f4f221a5-3f47-4484-af8d-8b97ba8d63b1",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc0e3e04-317e-416e-9f32-a5d7ccc62a73",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "ca324ee7-1ec9-490f-8160-9bd81f7d943d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "23577b81-1575-4d0a-8e38-de646240aa3b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "457326b0-d319-4f88-a7b7-1248696e6886",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "131"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "61d3499b-661a-4796-a5f1-ff8571788eb3"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              120,
              112,
              111,
              114,
              116,
              95,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              100,
              111,
              119,
              110,
              108,
              111,
              97,
              100,
              115,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              45,
              55,
              97,
              54,
              51,
              56,
              52,
              54,
              51,
              45,
              51,
              56,
              101,
              57,
              45,
              52,
              48,
              57,
              51,
              45,
              56,
              52,
              97,
              101,
              45,
              101,
              98,
              54,
              48,
              57,
              57,
              52,
              56,
              102,
              54,
              102,
              48,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              50,
              53,
              58,
              50,
              54,
              46,
              52,
              54,
              51,
              54,
              49,
              56,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 131
        },
        "id": "f4f221a5-3f47-4484-af8d-8b97ba8d63b1",
        "assertions": [
          {
            "assertion": "Export endpoint responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5f67cb67-c451-4625-8909-9d6e858a369c",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64070470-4735-4a24-90c3-9fd30cc5965a"
        },
        "item": {
          "id": "206c3b00-b85f-47b7-b2d7-960012bd87a1",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6291968a-656f-4a55-bd51-d42d281e6b36",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "223cfa0d-4079-48ef-98a9-6234056b5295"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7519bbdd-66c4-4f5e-ae0f-c56d03ad93f7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "43",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": {
          "id": "86239bc8-5f58-45d1-94fc-43403bacc428",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "03151aef-5bbc-466b-a740-ef97e2a445d4"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              111,
              117,
              116,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              58,
              123,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 62
        },
        "id": "206c3b00-b85f-47b7-b2d7-960012bd87a1",
        "assertions": [
          {
            "assertion": "Execution endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f0b2394-440a-44e3-9eef-8fc13ae4d787",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "52963a56-660f-4d40-ae87-a427cc1d449f"
        },
        "item": {
          "id": "ed14991a-3004-4f70-bd0b-410284ae5e62",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90dce111-4b8e-4ee5-a060-da9c49cab931",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "c99605c8-6526-4994-b54e-991a586de78d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50e61a82-6d94-4568-b6a7-7e4f128fa034",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": {
          "id": "24d3a75e-fe5d-4bd8-bda0-47e18937f44e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "365"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "f24d9e2e-92a5-48f3-a3f3-f6afe76a6072"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              108,
              97,
              110,
              95,
              105,
              100,
              34,
              58,
              34,
              101,
              55,
              49,
              55,
              97,
              55,
              102,
              100,
              45,
              54,
              50,
              97,
              56,
              45,
              52,
              52,
              57,
              56,
              45,
              56,
              57,
              100,
              48,
              45,
              48,
              50,
              49,
              48,
              50,
              55,
              100,
              53,
              50,
              48,
              99,
              56,
              34,
              44,
              34,
              115,
              116,
              101,
              112,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              49,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              49,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              50,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              50,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              51,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              51,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              52,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              52,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              53,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              53,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              53,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 365
        },
        "id": "ed14991a-3004-4f70-bd0b-410284ae5e62",
        "assertions": [
          {
            "assertion": "Reasoning plan endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "75f23ce4-90e9-44ba-911a-d7d803104d1e",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "667fd1fc-a8ec-4495-9788-80ebb3704ef6"
        },
        "item": {
          "id": "c5be3d0d-511b-4c66-839a-bf3ea94f0300",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7fcb7c0d-445f-49f7-9992-986713da44b9",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "a6cf9322-bacd-4c25-bb8c-0ac6fd606cdf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25051cf1-af01-4b8a-bd3e-15251c57f758",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "eeb40ba9-59ef-4ec4-8045-f76fe5093669",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "9ed42276-a480-48e9-b342-5dd02cf1a319"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              91,
              93,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              48,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              48,
              55,
              50,
              53,
              57,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 90
        },
        "id": "c5be3d0d-511b-4c66-839a-bf3ea94f0300",
        "assertions": [
          {
            "assertion": "Attention GET endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5582e551-ddcc-4fee-bcab-f4e99f9da780",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bbae8020-2a5b-4dd1-9883-317792422139"
        },
        "item": {
          "id": "1386fc5c-7978-4a4a-9eba-7044e9dc5498",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74392697-da49-4c7a-8d5f-59bbfbb0c296",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "eb6a4d95-fb22-4ada-bbaf-0c7241d62def"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0f0546cb-9e70-4c2d-9798-15e52e1dde6c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2640a939-63dc-4975-8bbb-4300d5349c04",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "146"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "37991f64-2959-4465-ba7a-518470125b62"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              105,
              100,
              108,
              101,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              48,
              55,
              50,
              53,
              57,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              95,
              103,
              111,
              97,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              111,
              97,
              108,
              95,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              91,
              93,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              95,
              110,
              101,
              120,
              116,
              95,
              115,
              116,
              97,
              116,
              101,
              115,
              34,
              58,
              91,
              34,
              102,
              111,
              99,
              117,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              108,
              101,
              101,
              112,
              105,
              110,
              103,
              34,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 146
        },
        "id": "1386fc5c-7978-4a4a-9eba-7044e9dc5498",
        "assertions": [
          {
            "assertion": "State GET endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f74ef592-86d3-49f0-831a-3583b30e735e",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3fe82e4d-7293-4ac1-92a9-55945a4e9247"
        },
        "item": {
          "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f4340dc-0002-41f2-a154-c33db23d8789",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c0c30cdb-185e-4037-bcad-f40d4ffb253a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": {
          "id": "e2db4265-47ce-4fdd-9ab6-451f62065d1d",
          "status": "Unprocessable Content",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "bc8409a1-2158-4341-8f42-7316dfd3c6db"
            },
            {
              "key": "content-length",
              "value": "259"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              98,
              99,
              56,
              52,
              48,
              57,
              97,
              49,
              45,
              50,
              49,
              53,
              56,
              45,
              52,
              51,
              52,
              49,
              45,
              56,
              102,
              52,
              50,
              45,
              55,
              51,
              49,
              54,
              100,
              102,
              100,
              51,
              99,
              54,
              100,
              98,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              32,
              114,
              117,
              108,
              101,
              34,
              44,
              34,
              112,
              97,
              116,
              116,
              101,
              114,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              32,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              34,
              125,
              125,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 259
        },
        "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
        "assertions": [
          {
            "assertion": "Experience rules POST endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience rules POST endpoint responds",
              "message": "expected [ 200, 201 ] to include 422",
              "stack": "AssertionError: expected [ 200, 201 ] to include 422\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Experience rule status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "60b2392b-5af1-4069-914c-0e513899d34f",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1948c8c3-5cc8-4924-979c-1f5eb0c60532"
        },
        "item": {
          "id": "47230e18-77a7-4a31-b714-559e828083a7",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fe6373e-c02e-439e-90b6-f7e961110eba",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "7b7a658d-0a30-416a-9ff1-ec61bf2fa7d3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dca65639-73ab-4295-9e93-8a9ed86f1f1c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e99e5a3c-63b5-4a21-ac17-3e6648dfdc22",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "455"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "8c3f3e89-c1b2-4ae6-8fa7-277d7ed0cb04"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              44,
              34,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              52,
              49,
              102,
              50,
              97,
              97,
              52,
              45,
              97,
              57,
              52,
              50,
              45,
              52,
              98,
              54,
              102,
              45,
              97,
              48,
              101,
              102,
              45,
              53,
              100,
              57,
              56,
              100,
              98,
              55,
              102,
              54,
              56,
              55,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              114,
              101,
              103,
              95,
              100,
              114,
              97,
              102,
              116,
              95,
              49,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              95,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              34,
              44,
              34,
              116,
              97,
              103,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              118,
              49,
              34,
              44,
              34,
              99,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              46,
              55,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              49,
              46,
              48,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              100,
              114,
              97,
              102,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              51,
              58,
              53,
              50,
              58,
              50,
              56,
              46,
              56,
              51,
              55,
              48,
              53,
              49,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              52,
              53,
              52,
              49,
              55,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              34,
              51,
              99,
              52,
              48,
              100,
              101,
              102,
              55,
              57,
              101,
              54,
              99,
              98,
              49,
              54,
              48,
              51,
              56,
              97,
              50,
              48,
              101,
              52,
              99,
              99,
              101,
              54,
              98,
              101,
              102,
              53,
              101,
              99,
              54,
              98,
              101,
              97,
              101,
              48,
              101,
              50,
              102,
              52,
              48,
              100,
              101,
              98,
              57,
              54,
              57,
              101,
              49,
              55,
              55,
              98,
              99,
              101,
              49,
              98,
              100,
              102,
              49,
              52,
              101,
              34,
              125,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              50,
              53,
              58,
              51,
              48,
              46,
              49,
              54,
              57,
              56,
              51,
              50,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 455
        },
        "id": "47230e18-77a7-4a31-b714-559e828083a7",
        "assertions": [
          {
            "assertion": "Experience candidates endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "88f69b40-6c3d-46a5-a224-8f05cf30675c",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "31614777-ad7d-43a3-af8c-0f831a6c1cde"
        },
        "item": {
          "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "c310f845-e597-4a42-b758-19f15e528e71"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "081d0c87-37fe-4c96-8b89-1e8cfa61b3c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2ad9b453-f8cb-44b8-b304-9a0c0ac4d7c5",
          "status": "Unprocessable Content",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "32620433-ad70-414e-b652-ff0d102c1bc3"
            },
            {
              "key": "content-length",
              "value": "197"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              51,
              50,
              54,
              50,
              48,
              52,
              51,
              51,
              45,
              97,
              100,
              55,
              48,
              45,
              52,
              49,
              52,
              101,
              45,
              98,
              54,
              53,
              50,
              45,
              102,
              102,
              48,
              100,
              49,
              48,
              50,
              99,
              49,
              98,
              99,
              51,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              113,
              117,
              101,
              114,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 197
        },
        "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
        "assertions": [
          {
            "assertion": "Cloud status endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cloud status endpoint responds",
              "message": "expected [ 200 ] to include 422",
              "stack": "AssertionError: expected [ 200 ] to include 422\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "afc29f25-f805-4166-be53-f76723ab491e",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "516c233e-1648-49dd-9cd0-34a6415a6496"
        },
        "item": {
          "id": "af241e01-b7e3-408a-b809-cf6a04e5c061",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74d40f10-e072-4bc7-94f5-09f24b7e5332",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "4972c9d5-fcce-4308-b8ff-7c788eb1f5c2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5878062a-90e7-4512-9e32-49ed413ba086",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "63a921a8-7eea-4c6c-85c5-dbd6e8b552a6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "4362"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "f70e3db2-de48-488f-9e0e-1ac7aac344b2"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              95,
              108,
              111,
              97,
              100,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              101,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              124,
              52,
              48,
              52,
              34,
              58,
              52,
              44,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              48,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              108,
              111,
              117,
              100,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              124,
              52,
              50,
              50,
              34,
              58,
              52,
              44,
              34,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              103,
              101,
              116,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              124,
              50,
              48,
              48,
              34,
              58,
              52,
              44,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              103,
              101,
              116,
              95,
              115,
              116,
              97,
              116,
              101,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              115,
              116,
              97,
              116,
              101,
              124,
              50,
              48,
              48,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              47,
              97,
              99,
              116,
              124,
              50,
              48,
              48,
              34,
              58,
              52,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              124,
              50,
              48,
              48,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              114,
              117,
              108,
              101,
              115,
              124,
              52,
              50,
              50,
              34,
              58,
              52,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              124,
              52,
              48,
              53,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              124,
              52,
              50,
              50,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              124,
              52,
              48,
              53,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              47,
              112,
              108,
              97,
              110,
              124,
              50,
              48,
              48,
              34,
              58,
              52,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              115,
              121,
              110,
              99,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              50,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              105,
              116,
              101,
              109,
              115,
              95,
              115,
              121,
              110,
              99,
              101,
              100,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              124,
              50,
              48,
              48,
              34,
              58,
              50,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              124,
              50,
              48,
              48,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              124,
              50,
              48,
              48,
              34,
              58,
              49,
              125,
              44,
              34,
              116,
              105,
              109,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              52,
              56,
              48,
              48,
              48,
              48,
              49,
              53,
              54,
              52,
              52,
              51,
              53,
              54,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              53,
              55,
              57,
              48,
              48,
              48,
              51,
              50,
              50,
              49,
              52,
              56,
              50,
              48,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              57,
              50,
              57,
              48,
              48,
              48,
              56,
              49,
              51,
              53,
              49,
              51,
              57,
              57,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              53,
              55,
              57,
              48,
              48,
              48,
              51,
              50,
              50,
              49,
              52,
              56,
              50,
              48,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              108,
              111,
              117,
              100,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              54,
              51,
              53,
              50,
              53,
              48,
              52,
              49,
              55,
              57,
              56,
              49,
              50,
              57,
              55,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              54,
              53,
              52,
              48,
              48,
              48,
              54,
              48,
              56,
              50,
              53,
              48,
              52,
              57,
              57,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              51,
              50,
              57,
              48,
              48,
              48,
              51,
              54,
              54,
              56,
              53,
              49,
              54,
              56,
              55,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              54,
              53,
              52,
              48,
              48,
              48,
              54,
              48,
              56,
              50,
              53,
              48,
              52,
              57,
              57,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              49,
              49,
              54,
              48,
              48,
              48,
              55,
              56,
              50,
              50,
              51,
              50,
              55,
              51,
              49,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              49,
              56,
              53,
              48,
              48,
              49,
              48,
              54,
              52,
              48,
              57,
              49,
              57,
              50,
              49,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              53,
              48,
              57,
              48,
              48,
              49,
              49,
              48,
              55,
              56,
              56,
              54,
              52,
              51,
              51,
              54,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              49,
              56,
              53,
              48,
              48,
              49,
              48,
              54,
              52,
              48,
              57,
              49,
              57,
              50,
              49,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              56,
              49,
              53,
              50,
              53,
              48,
              50,
              56,
              53,
              57,
              48,
              49,
              49,
              50,
              57,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              50,
              57,
              50,
              48,
              48,
              48,
              49,
              56,
              48,
              49,
              49,
              48,
              51,
              51,
              53,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              53,
              56,
              55,
              57,
              57,
              57,
              51,
              56,
              49,
              49,
              50,
              52,
              57,
              55,
              51,
              51,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              50,
              57,
              50,
              48,
              48,
              48,
              49,
              56,
              48,
              49,
              49,
              48,
              51,
              51,
              53,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              47,
              97,
              99,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              56,
              48,
              57,
              53,
              48,
              48,
              48,
              50,
              51,
              48,
              50,
              52,
              49,
              53,
              54,
              55,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              53,
              55,
              54,
              48,
              48,
              48,
              57,
              50,
              56,
              56,
              55,
              56,
              55,
              56,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              50,
              48,
              49,
              48,
              48,
              48,
              48,
              50,
              49,
              55,
              55,
              48,
              53,
              57,
              55,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              53,
              55,
              54,
              48,
              48,
              48,
              57,
              50,
              56,
              56,
              55,
              56,
              55,
              56,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              55,
              54,
              49,
              50,
              55,
              53,
              48,
              48,
              53,
              48,
              54,
              49,
              49,
              55,
              57,
              52,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              49,
              57,
              51,
              48,
              48,
              48,
              50,
              52,
              53,
              56,
              51,
              57,
              51,
              53,
              55,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              48,
              57,
              51,
              48,
              48,
              48,
              51,
              54,
              51,
              53,
              53,
              56,
              53,
              51,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              49,
              57,
              51,
              48,
              48,
              48,
              50,
              52,
              53,
              56,
              51,
              57,
              51,
              53,
              55,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              114,
              117,
              108,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              53,
              48,
              52,
              56,
              50,
              52,
              57,
              57,
              49,
              53,
              55,
              48,
              55,
              56,
              53,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              49,
              51,
              55,
              56,
              48,
              48,
              48,
              50,
              55,
              54,
              49,
              54,
              51,
              50,
              50,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              53,
              49,
              52,
              48,
              48,
              48,
              48,
              55,
              54,
              56,
              48,
              48,
              53,
              56,
              53,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              49,
              51,
              55,
              56,
              48,
              48,
              48,
              50,
              55,
              54,
              49,
              54,
              51,
              50,
              50,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              49,
              48,
              53,
              52,
              57,
              57,
              56,
              50,
              57,
              49,
              54,
              53,
              54,
              51,
              55,
              53,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              56,
              56,
              57,
              57,
              57,
              56,
              56,
              54,
              52,
              51,
              56,
              50,
              53,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              50,
              55,
              50,
              49,
              57,
              57,
              57,
              55,
              55,
              49,
              56,
              57,
              51,
              48,
              50,
              52,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              56,
              56,
              57,
              57,
              57,
              56,
              56,
              54,
              52,
              51,
              56,
              50,
              53,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              52,
              56,
              53,
              48,
              55,
              53,
              48,
              49,
              53,
              56,
              48,
              55,
              53,
              50,
              52,
              51,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              52,
              53,
              50,
              51,
              48,
              48,
              48,
              57,
              52,
              48,
              54,
              56,
              48,
              53,
              48,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              50,
              54,
              48,
              57,
              57,
              57,
              57,
              52,
              52,
              48,
              54,
              49,
              48,
              52,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              52,
              53,
              50,
              51,
              48,
              48,
              48,
              57,
              52,
              48,
              54,
              56,
              48,
              53,
              48,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              50,
              52,
              51,
              52,
              57,
              57,
              49,
              51,
              51,
              55,
              51,
              53,
              56,
              57,
              53,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              54,
              48,
              53,
              57,
              57,
              56,
              57,
              56,
              51,
              54,
              48,
              54,
              54,
              57,
              54,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              56,
              56,
              48,
              57,
              57,
              57,
              50,
              56,
              51,
              56,
              54,
              53,
              48,
              57,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              54,
              48,
              53,
              57,
              57,
              56,
              57,
              56,
              51,
              54,
              48,
              54,
              54,
              57,
              54,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              48,
              51,
              57,
              49,
              54,
              54,
              53,
              56,
              53,
              53,
              52,
              50,
              50,
              54,
              49,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              50,
              46,
              48,
              51,
              54,
              53,
              57,
              57,
              57,
              48,
              56,
              48,
              50,
              52,
              48,
              55,
              50,
              54,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              51,
              57,
              53,
              57,
              57,
              57,
              49,
              55,
              56,
              50,
              57,
              48,
              51,
              54,
              55,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              50,
              46,
              48,
              51,
              54,
              53,
              57,
              57,
              57,
              48,
              56,
              48,
              50,
              52,
              48,
              55,
              50,
              54,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              47,
              112,
              108,
              97,
              110,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              52,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              49,
              57,
              48,
              50,
              52,
              57,
              57,
              51,
              51,
              56,
              54,
              49,
              49,
              57,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              54,
              54,
              50,
              48,
              48,
              48,
              52,
              49,
              57,
              53,
              55,
              49,
              57,
              57,
              54,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              57,
              53,
              50,
              51,
              57,
              57,
              57,
              49,
              55,
              56,
              55,
              56,
              50,
              49,
              48,
              53,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              54,
              54,
              50,
              48,
              48,
              48,
              52,
              49,
              57,
              53,
              55,
              49,
              57,
              57,
              54,
              125,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              115,
              121,
              110,
              99,
              95,
              109,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              49,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              48,
              57,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              48,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              56,
              56,
              52,
              57,
              57,
              57,
              57,
              52,
              51,
              56,
              57,
              55,
              49,
              50,
              56,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              48,
              52,
              49,
              57,
              57,
              57,
              57,
              55,
              53,
              50,
              49,
              57,
              51,
              54,
              57,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              55,
              50,
              55,
              57,
              57,
              57,
              57,
              49,
              50,
              53,
              55,
              52,
              56,
              56,
              55,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              48,
              52,
              49,
              57,
              57,
              57,
              57,
              55,
              53,
              50,
              49,
              57,
              51,
              54,
              57,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              52,
              48,
              49,
              48,
              48,
              48,
              49,
              51,
              48,
              57,
              50,
              49,
              54,
              48,
              50,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              52,
              48,
              49,
              48,
              48,
              48,
              49,
              51,
              48,
              57,
              50,
              49,
              54,
              48,
              50,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              52,
              48,
              49,
              48,
              48,
              48,
              49,
              51,
              48,
              57,
              50,
              49,
              54,
              48,
              50,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              52,
              48,
              49,
              48,
              48,
              48,
              49,
              51,
              48,
              57,
              50,
              49,
              54,
              48,
              50,
              125,
              125,
              44,
              34,
              103,
              97,
              117,
              103,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              116,
              97,
              99,
              107,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              114,
              117,
              108,
              101,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              46,
              48,
              125,
              44,
              34,
              108,
              97,
              98,
              101,
              108,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              115,
              116,
              97,
              116,
              101,
              95,
              108,
              97,
              98,
              101,
              108,
              34,
              58,
              34,
              105,
              100,
              108,
              101,
              34,
              125,
              44,
              34,
              119,
              105,
              110,
              100,
              111,
              119,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              50,
              53,
              58,
              51,
              49,
              46,
              51,
              57,
              57,
              49,
              51,
              53,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 4362
        },
        "id": "af241e01-b7e3-408a-b809-cf6a04e5c061",
        "assertions": [
          {
            "assertion": "Metrics endpoint responds",
            "skipped": false
          },
          {
            "assertion": "Metrics status validation completed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7c08197e-0c99-49cf-a243-99b0d96550d3",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a9739b96-6a74-4c3e-a6ac-553333909c6f"
        },
        "item": {
          "id": "7a3dab9f-db83-4535-8feb-03af020ea405",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40de3fe1-d3e9-4b77-b4f7-7b4eb95365c1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "8fa9a7c8-aa59-48ea-a169-aa5c5d7af20e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1c87313-96c8-42b6-bd6a-b89661760f24",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "40a080b6-197e-40fa-ba5d-2928b02a5c12",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:25:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "83"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "410c1660-fa35-44a9-9d10-e4562829bddb"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              34,
              58,
              48,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              50,
              53,
              58,
              51,
              50,
              46,
              48,
              50,
              49,
              50,
              55,
              48,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 83
        },
        "id": "7a3dab9f-db83-4535-8feb-03af020ea405",
        "assertions": [
          {
            "assertion": "Logs search endpoint responds",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6370
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience rules POST endpoint responds",
          "message": "expected [ 200, 201 ] to include 422",
          "stack": "AssertionError: expected [ 200, 201 ] to include 422\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "ba1159292486a56c62d7a7cb11ef962d",
          "id": "4a460cd7-59dc-4456-b862-baac348a1386",
          "timestamp": 1756373129567,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f4340dc-0002-41f2-a154-c33db23d8789",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "4b526b97-e7e2-4f30-bf38-691750a8f9e8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70233ce5-6c29-4288-94be-4345aaff4dcb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "548dbc1e-f48e-46a9-981d-dc226f3f6245"
                  }
                }
              ]
            },
            {
              "id": "29cbbf57-d452-4403-a703-bf8f9442a11d",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6fef221-982e-4976-8cf9-03c44486c654",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bd122a6f-1cf0-44df-8f00-3aa710a69d16"
                  }
                }
              ]
            },
            {
              "id": "f4f221a5-3f47-4484-af8d-8b97ba8d63b1",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc0e3e04-317e-416e-9f32-a5d7ccc62a73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "ca324ee7-1ec9-490f-8160-9bd81f7d943d"
                  }
                }
              ]
            },
            {
              "id": "206c3b00-b85f-47b7-b2d7-960012bd87a1",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6291968a-656f-4a55-bd51-d42d281e6b36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "223cfa0d-4079-48ef-98a9-6234056b5295"
                  }
                }
              ]
            },
            {
              "id": "ed14991a-3004-4f70-bd0b-410284ae5e62",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "90dce111-4b8e-4ee5-a060-da9c49cab931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "c99605c8-6526-4994-b54e-991a586de78d"
                  }
                }
              ]
            },
            {
              "id": "c5be3d0d-511b-4c66-839a-bf3ea94f0300",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fcb7c0d-445f-49f7-9992-986713da44b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "a6cf9322-bacd-4c25-bb8c-0ac6fd606cdf"
                  }
                }
              ]
            },
            {
              "id": "1386fc5c-7978-4a4a-9eba-7044e9dc5498",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74392697-da49-4c7a-8d5f-59bbfbb0c296",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "eb6a4d95-fb22-4ada-bbaf-0c7241d62def"
                  }
                }
              ]
            },
            {
              "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f4340dc-0002-41f2-a154-c33db23d8789",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
                  }
                }
              ]
            },
            {
              "id": "47230e18-77a7-4a31-b714-559e828083a7",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3fe6373e-c02e-439e-90b6-f7e961110eba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "7b7a658d-0a30-416a-9ff1-ec61bf2fa7d3"
                  }
                }
              ]
            },
            {
              "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "c310f845-e597-4a42-b758-19f15e528e71"
                  }
                }
              ]
            },
            {
              "id": "af241e01-b7e3-408a-b809-cf6a04e5c061",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74d40f10-e072-4bc7-94f5-09f24b7e5332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "4972c9d5-fcce-4308-b8ff-7c788eb1f5c2"
                  }
                }
              ]
            },
            {
              "id": "7a3dab9f-db83-4535-8feb-03af020ea405",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40de3fe1-d3e9-4b77-b4f7-7b4eb95365c1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "8fa9a7c8-aa59-48ea-a169-aa5c5d7af20e"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "036f1e57-b5c4-4c79-9dfb-e2b5cc7526d4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "f74ef592-86d3-49f0-831a-3583b30e735e",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3fe82e4d-7293-4ac1-92a9-55945a4e9247",
          "scriptId": "5f4340dc-0002-41f2-a154-c33db23d8789",
          "execution": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cloud status endpoint responds",
          "message": "expected [ 200 ] to include 422",
          "stack": "AssertionError: expected [ 200 ] to include 422\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "c962c8190ca4b84cdcb6e564eb60424b",
          "id": "04c2251f-01d4-4e67-b922-bfa6185cf797",
          "timestamp": 1756373130794,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "c310f845-e597-4a42-b758-19f15e528e71"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "4b526b97-e7e2-4f30-bf38-691750a8f9e8",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70233ce5-6c29-4288-94be-4345aaff4dcb",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "548dbc1e-f48e-46a9-981d-dc226f3f6245"
                  }
                }
              ]
            },
            {
              "id": "29cbbf57-d452-4403-a703-bf8f9442a11d",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6fef221-982e-4976-8cf9-03c44486c654",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "bd122a6f-1cf0-44df-8f00-3aa710a69d16"
                  }
                }
              ]
            },
            {
              "id": "f4f221a5-3f47-4484-af8d-8b97ba8d63b1",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bc0e3e04-317e-416e-9f32-a5d7ccc62a73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "ca324ee7-1ec9-490f-8160-9bd81f7d943d"
                  }
                }
              ]
            },
            {
              "id": "206c3b00-b85f-47b7-b2d7-960012bd87a1",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6291968a-656f-4a55-bd51-d42d281e6b36",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "223cfa0d-4079-48ef-98a9-6234056b5295"
                  }
                }
              ]
            },
            {
              "id": "ed14991a-3004-4f70-bd0b-410284ae5e62",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "90dce111-4b8e-4ee5-a060-da9c49cab931",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "c99605c8-6526-4994-b54e-991a586de78d"
                  }
                }
              ]
            },
            {
              "id": "c5be3d0d-511b-4c66-839a-bf3ea94f0300",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7fcb7c0d-445f-49f7-9992-986713da44b9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "a6cf9322-bacd-4c25-bb8c-0ac6fd606cdf"
                  }
                }
              ]
            },
            {
              "id": "1386fc5c-7978-4a4a-9eba-7044e9dc5498",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74392697-da49-4c7a-8d5f-59bbfbb0c296",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "eb6a4d95-fb22-4ada-bbaf-0c7241d62def"
                  }
                }
              ]
            },
            {
              "id": "c2b883fa-bf88-479e-88f8-c40eeb47257f",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f4340dc-0002-41f2-a154-c33db23d8789",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "43c368e9-8c3f-4833-a1ab-db22b52f00d7"
                  }
                }
              ]
            },
            {
              "id": "47230e18-77a7-4a31-b714-559e828083a7",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3fe6373e-c02e-439e-90b6-f7e961110eba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "7b7a658d-0a30-416a-9ff1-ec61bf2fa7d3"
                  }
                }
              ]
            },
            {
              "id": "41ff7872-c17a-4af9-bbd1-dba1add58ced",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "c310f845-e597-4a42-b758-19f15e528e71"
                  }
                }
              ]
            },
            {
              "id": "af241e01-b7e3-408a-b809-cf6a04e5c061",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74d40f10-e072-4bc7-94f5-09f24b7e5332",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "4972c9d5-fcce-4308-b8ff-7c788eb1f5c2"
                  }
                }
              ]
            },
            {
              "id": "7a3dab9f-db83-4535-8feb-03af020ea405",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40de3fe1-d3e9-4b77-b4f7-7b4eb95365c1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "8fa9a7c8-aa59-48ea-a169-aa5c5d7af20e"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "036f1e57-b5c4-4c79-9dfb-e2b5cc7526d4",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "88f69b40-6c3d-46a5-a224-8f05cf30675c",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "31614777-ad7d-43a3-af8c-0f831a6c1cde",
          "scriptId": "ff2c256a-d23b-44c0-a3c3-cdfa0b3a0fe6",
          "execution": "c310f845-e597-4a42-b758-19f15e528e71"
        }
      }
    ],
    "error": null
  }
}