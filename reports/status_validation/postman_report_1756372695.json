{
  "collection": {
    "item": [
      {
        "id": "734b3ec4-9eb3-4482-8fcb-690ed2cdc73a",
        "name": "Agents Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1839e289-3a6c-4980-944d-847a15e417f3",
              "type": "text/javascript",
              "exec": [
                "pm.test('Response is JSON', function () {",
                "  pm.response.to.have.header('Content-Type');",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "20df372c-5c34-412d-bf8a-acaa8f63ced9"
            }
          }
        ]
      },
      {
        "id": "145eaf01-6422-470a-b31b-de7a7cad7dc6",
        "name": "Memory Sync (202 + CloudSyncJob)",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c1403a25-3751-476a-8148-ddb4b64c7555",
              "type": "text/javascript",
              "exec": [
                "const status = pm.response.code;",
                "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                "  pm.expect([200,201,202,204]).to.include(status);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function scan(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                "      }",
                "      scan(v);",
                "    });",
                "  }",
                "}",
                "scan(json);",
                "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "a74721e3-19a2-4ea5-bc22-ac66921aac30"
            }
          }
        ]
      },
      {
        "id": "b5bbd207-a879-4ab5-b583-bc299f5e66c9",
        "name": "Memory Export",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "68437bf8-3c87-4c1b-b8a1-8b4423574b1a",
              "type": "text/javascript",
              "exec": [
                "pm.test('Export endpoint responds successfully', function () {",
                "  pm.expect([200,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                "",
                "function validateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                "      }",
                "      validateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateStatus(json);"
              ],
              "_lastExecutionId": "464746e7-7fe2-48ff-a84a-aa812206c63a"
            }
          }
        ]
      },
      {
        "id": "aabe0ec2-cf53-409b-ac77-0d7046df2957",
        "name": "Execution Act",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "178abae7-7abc-40d4-9fd1-21f149a7254d",
              "type": "text/javascript",
              "exec": [
                "pm.test('Execution endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validateExecutionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                "      }",
                "      validateExecutionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExecutionStatus(json);"
              ],
              "_lastExecutionId": "eddfc9fd-3724-47bd-a933-2d59d7ee6798"
            }
          }
        ]
      },
      {
        "id": "273c969a-3f06-45d8-8c47-67c8fcd83c04",
        "name": "Reasoning Plan",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ea65a4a9-89ea-4bcb-8911-f64f68862274",
              "type": "text/javascript",
              "exec": [
                "pm.test('Reasoning plan endpoint responds', function () {",
                "  pm.expect([200,201,202]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                "",
                "function validatePlanStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                "      }",
                "      validatePlanStatus(v);",
                "    });",
                "  }",
                "}",
                "validatePlanStatus(json);"
              ],
              "_lastExecutionId": "8adb3c91-b68c-46bb-bce3-97672b07a581"
            }
          }
        ]
      },
      {
        "id": "7dd1f98e-0be3-46f6-88f4-753ce6f58056",
        "name": "Consciousness Attention GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "28c46c16-a521-46ba-8d41-adeb913de96f",
              "type": "text/javascript",
              "exec": [
                "pm.test('Attention GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                "",
                "function validateAttentionStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                "      }",
                "      validateAttentionStatus(v);",
                "    });",
                "  }",
                "}",
                "validateAttentionStatus(json);"
              ],
              "_lastExecutionId": "f14914ae-5ad7-4c35-bf31-6398f8e24281"
            }
          }
        ]
      },
      {
        "id": "75ea340e-71ae-4c83-b8e6-d660361e16aa",
        "name": "Consciousness State GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "2e67ba8d-b6ea-4680-9fa4-12611cf329f1",
              "type": "text/javascript",
              "exec": [
                "pm.test('State GET endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateConsciousnessState(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                "      }",
                "      validateConsciousnessState(v);",
                "    });",
                "  }",
                "}",
                "validateConsciousnessState(json);"
              ],
              "_lastExecutionId": "4ec5d325-1501-4260-a475-c058fff362ae"
            }
          }
        ]
      },
      {
        "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
        "name": "Experience Rules POST",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience rules POST endpoint responds', function () {",
                "  pm.expect([200,201]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateExperienceStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        // Experience rules can use 'active' (enable/disable semantics)",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                "      }",
                "      validateExperienceStatus(v);",
                "    });",
                "  }",
                "}",
                "validateExperienceStatus(json);",
                "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
            }
          }
        ]
      },
      {
        "id": "cfb7f713-2202-4c57-8faf-c55eb4234e59",
        "name": "Experience Candidates GET",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "230a3109-1b27-463b-a577-3711bc8065cd",
              "type": "text/javascript",
              "exec": [
                "pm.test('Experience candidates endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                "",
                "function validateCandidateStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                "      }",
                "      validateCandidateStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCandidateStatus(json);"
              ],
              "_lastExecutionId": "c3329600-d341-404a-85b6-adcfac9f4da4"
            }
          }
        ]
      },
      {
        "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
        "name": "Cloud Status",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
              "type": "text/javascript",
              "exec": [
                "pm.test('Cloud status endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                "",
                "function validateCloudStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                "      }",
                "      validateCloudStatus(v);",
                "    });",
                "  }",
                "}",
                "validateCloudStatus(json);"
              ],
              "_lastExecutionId": "414afb18-a366-41a8-a4e4-c2241c5c1551"
            }
          }
        ]
      },
      {
        "id": "2dd3f48c-d517-4f32-9854-954911c4ce1d",
        "name": "Observability Metrics",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ee04a13b-29e9-44e9-9161-4a9defcba2be",
              "type": "text/javascript",
              "exec": [
                "pm.test('Metrics endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateMetricsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                "      }",
                "      validateMetricsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateMetricsStatus(json);",
                "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
              ],
              "_lastExecutionId": "9a26a58f-9933-4cdb-8060-ade6ac78965d"
            }
          }
        ]
      },
      {
        "id": "91088cfe-59c9-4831-ac5c-c868b9e8d37d",
        "name": "Observability Logs Search",
        "request": {
          "url": {
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a97433e8-3eda-4ccc-ab25-222df8fa0b28",
              "type": "text/javascript",
              "exec": [
                "pm.test('Logs search endpoint responds', function () {",
                "  pm.expect([200]).to.include(pm.response.code);",
                "});",
                "",
                "let json = {};",
                "try { json = pm.response.json(); } catch (e) { json = {}; }",
                "",
                "const DISALLOWED = new Set(['running','success','error']);",
                "",
                "function validateLogsStatus(obj) {",
                "  if (obj === null || obj === undefined) return;",
                "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                "  if (typeof obj === 'object') {",
                "    Object.keys(obj).forEach(k => {",
                "      const v = obj[k];",
                "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                "      }",
                "      validateLogsStatus(v);",
                "    });",
                "  }",
                "}",
                "validateLogsStatus(json);"
              ],
              "_lastExecutionId": "0f63e965-3244-4c65-b983-facff5bf7e5a"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "98737c3c-1de2-44f0-a1a9-10cbbf9c2ba8",
      "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-28T08:00:00.000Z",
      "postman_exported_using": "Postman/10.x"
    },
    "id": "8f7b3a74-5c2f-4e15-9db0-1e5f2243e001",
    "name": "V2.3 Local",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:8000",
        "key": "baseUrl"
      }
    ]
  },
  "globals": {
    "id": "946a6c73-246c-44aa-bc15-ab32532d9db6",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 16,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 6.583333333333333,
      "responseMin": 2,
      "responseMax": 32,
      "responseSd": 7.7830835077679135,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756372695878,
      "completed": 1756372703334
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 12,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8fecf5f2-0ab1-497c-ba0d-7e27de9976b6",
          "httpRequestId": "86c3c9f3-f248-4fb0-94eb-be00db096b2e"
        },
        "item": {
          "id": "734b3ec4-9eb3-4482-8fcb-690ed2cdc73a",
          "name": "Agents Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "agents",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1839e289-3a6c-4980-944d-847a15e417f3",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Response is JSON', function () {",
                  "  pm.response.to.have.header('Content-Type');",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                  "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "20df372c-5c34-412d-bf8a-acaa8f63ced9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "agents",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b747b088-fd6f-4a7c-997e-26587c6c45e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0399ede3-0e77-42ed-b4b0-9be3f919dd93",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "a8fbd3bb-34cb-49fa-926c-ebd2a70ff80d"
            },
            {
              "key": "content-length",
              "value": "86"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              48,
              49,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              97,
              56,
              102,
              98,
              100,
              51,
              98,
              98,
              45,
              51,
              52,
              99,
              98,
              45,
              52,
              57,
              102,
              97,
              45,
              57,
              50,
              54,
              99,
              45,
              101,
              98,
              100,
              50,
              97,
              55,
              48,
              102,
              102,
              56,
              48,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 32,
          "responseSize": 86
        },
        "id": "734b3ec4-9eb3-4482-8fcb-690ed2cdc73a",
        "assertions": [
          {
            "assertion": "Response is JSON",
            "skipped": false
          },
          {
            "assertion": "Agent health status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4bfb5157-f41b-4d2e-8f6b-e9aaabc62912",
          "length": 12,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "84509e54-38b2-437c-9199-ff261d431ef7"
        },
        "item": {
          "id": "145eaf01-6422-470a-b31b-de7a7cad7dc6",
          "name": "Memory Sync (202 + CloudSyncJob)",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "sync"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1403a25-3751-476a-8148-ddb4b64c7555",
                "type": "text/javascript",
                "exec": [
                  "const status = pm.response.code;",
                  "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                  "  pm.expect([200,201,202,204]).to.include(status);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function scan(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                  "      }",
                  "      scan(v);",
                  "    });",
                  "  }",
                  "}",
                  "scan(json);",
                  "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "a74721e3-19a2-4ea5-bc22-ac66921aac30"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "sync"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "name": "Content-Type",
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27581bbc-dd5b-4870-b255-8515ba6567fe",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "69",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
          }
        },
        "response": {
          "id": "46bd3cc3-eb83-4191-b1f8-4a39643e77ab",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "134"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "e7f9b3ad-bdd0-41ff-a6c0-fc0f44fff5ba"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              121,
              110,
              99,
              101,
              100,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              44,
              34,
              102,
              97,
              105,
              108,
              101,
              100,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              50,
              54,
              49,
              98,
              98,
              99,
              99,
              49,
              45,
              97,
              98,
              55,
              52,
              45,
              52,
              56,
              98,
              54,
              45,
              98,
              99,
              51,
              53,
              45,
              53,
              99,
              52,
              57,
              52,
              54,
              48,
              101,
              50,
              57,
              99,
              53,
              34,
              44,
              34,
              102,
              105,
              110,
              105,
              115,
              104,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              49,
              56,
              58,
              49,
              55,
              46,
              48,
              57,
              50,
              50,
              50,
              49,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 7,
          "responseSize": 134
        },
        "id": "145eaf01-6422-470a-b31b-de7a7cad7dc6",
        "assertions": [
          {
            "assertion": "Accepted (202) or OK (200/201/204) for sync endpoint",
            "skipped": false
          },
          {
            "assertion": "CloudSyncJob status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "53b9b986-ed22-4782-b8ca-584d31b262ad",
          "length": 12,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "82cee0b9-fd0e-4094-98a6-1efdb032e105"
        },
        "item": {
          "id": "b5bbd207-a879-4ab5-b583-bc299f5e66c9",
          "name": "Memory Export",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "memory",
                "export"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "68437bf8-3c87-4c1b-b8a1-8b4423574b1a",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Export endpoint responds successfully', function () {",
                  "  pm.expect([200,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                  "",
                  "function validateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                  "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                  "      }",
                  "      validateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateStatus(json);"
                ],
                "_lastExecutionId": "464746e7-7fe2-48ff-a84a-aa812206c63a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "memory",
              "export"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50221da1-452c-4591-b172-c6e11c87da25",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "277d8bf9-72db-4ac7-a155-869650587cac",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "131"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "bf2dbaaf-39e7-491f-a9b5-aea5c9d24555"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              120,
              112,
              111,
              114,
              116,
              95,
              117,
              114,
              108,
              34,
              58,
              34,
              47,
              100,
              111,
              119,
              110,
              108,
              111,
              97,
              100,
              115,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              45,
              55,
              48,
              48,
              55,
              101,
              99,
              53,
              52,
              45,
              56,
              101,
              56,
              57,
              45,
              52,
              53,
              48,
              54,
              45,
              56,
              102,
              53,
              48,
              45,
              48,
              57,
              102,
              50,
              50,
              55,
              100,
              102,
              98,
              101,
              56,
              102,
              46,
              106,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              49,
              48,
              58,
              49,
              56,
              58,
              49,
              55,
              46,
              55,
              49,
              50,
              50,
              49,
              48,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 131
        },
        "id": "b5bbd207-a879-4ab5-b583-bc299f5e66c9",
        "assertions": [
          {
            "assertion": "Export endpoint responds successfully",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "87bf4646-2f81-4174-8546-47bc6ea77978",
          "length": 12,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "65282ea0-fdaa-4718-85be-9affde5b86c4"
        },
        "item": {
          "id": "aabe0ec2-cf53-409b-ac77-0d7046df2957",
          "name": "Execution Act",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "execution",
                "act"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "178abae7-7abc-40d4-9fd1-21f149a7254d",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Execution endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validateExecutionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                  "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                  "      }",
                  "      validateExecutionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExecutionStatus(json);"
                ],
                "_lastExecutionId": "eddfc9fd-3724-47bd-a933-2d59d7ee6798"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "execution",
              "act"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "764761db-08b9-45d6-81c3-55a2aee45531",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "43",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
          }
        },
        "response": {
          "id": "61c528a8-5899-49de-bedd-9be50b17a87b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "7a27f4b4-fd51-4444-bbea-c58db8beb17c"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              111,
              117,
              116,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              44,
              34,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              58,
              123,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 62
        },
        "id": "aabe0ec2-cf53-409b-ac77-0d7046df2957",
        "assertions": [
          {
            "assertion": "Execution endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0e61be8e-2965-4832-a05b-4b0b945db7eb",
          "length": 12,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ede084f3-914a-479d-bbd4-93e0ce124791"
        },
        "item": {
          "id": "273c969a-3f06-45d8-8c47-67c8fcd83c04",
          "name": "Reasoning Plan",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "reasoning",
                "plan"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"goal\": \"test planning\", \"context\": {}}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea65a4a9-89ea-4bcb-8911-f64f68862274",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Reasoning plan endpoint responds', function () {",
                  "  pm.expect([200,201,202]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                  "",
                  "function validatePlanStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                  "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                  "      }",
                  "      validatePlanStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validatePlanStatus(json);"
                ],
                "_lastExecutionId": "8adb3c91-b68c-46bb-bce3-97672b07a581"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "reasoning",
              "plan"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "853b4b6b-16d7-4eaa-915c-70b74bc9e68f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"goal\": \"test planning\", \"context\": {}}"
          }
        },
        "response": {
          "id": "cf14ee27-0422-40dd-88d3-cff854e45670",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "365"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "d09480f4-4748-42be-b207-eaba7ef05173"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              108,
              97,
              110,
              95,
              105,
              100,
              34,
              58,
              34,
              101,
              99,
              51,
              52,
              48,
              50,
              54,
              101,
              45,
              99,
              52,
              54,
              51,
              45,
              52,
              99,
              51,
              99,
              45,
              97,
              100,
              97,
              98,
              45,
              56,
              100,
              50,
              50,
              48,
              48,
              100,
              99,
              97,
              102,
              53,
              50,
              34,
              44,
              34,
              115,
              116,
              101,
              112,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              49,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              49,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              50,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              50,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              50,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              51,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              51,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              51,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              52,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              52,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              110,
              100,
              101,
              120,
              34,
              58,
              53,
              44,
              34,
              97,
              99,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              115,
              116,
              101,
              112,
              45,
              53,
              34,
              44,
              34,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              95,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              34,
              58,
              34,
              111,
              117,
              116,
              99,
              111,
              109,
              101,
              45,
              53,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 365
        },
        "id": "273c969a-3f06-45d8-8c47-67c8fcd83c04",
        "assertions": [
          {
            "assertion": "Reasoning plan endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "212e93b7-e70c-4b48-b29f-24b25b6b168a",
          "length": 12,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5cb64ad7-096c-45aa-b33f-1eebebbe7dda"
        },
        "item": {
          "id": "7dd1f98e-0be3-46f6-88f4-753ce6f58056",
          "name": "Consciousness Attention GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "attention"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "28c46c16-a521-46ba-8d41-adeb913de96f",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Attention GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                  "",
                  "function validateAttentionStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                  "      }",
                  "      validateAttentionStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateAttentionStatus(json);"
                ],
                "_lastExecutionId": "f14914ae-5ad7-4c35-bf31-6398f8e24281"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "attention"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ec60fda3-a2fe-4a31-8af8-7d1364e3ab8a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "57858aed-00c3-4dc2-87fa-cca6e3046d61",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "3a52d56e-2686-4854-819e-b58ec2be7c50"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              91,
              93,
              44,
              34,
              115,
              116,
              97,
              99,
              107,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              48,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              48,
              55,
              50,
              53,
              57,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 90
        },
        "id": "7dd1f98e-0be3-46f6-88f4-753ce6f58056",
        "assertions": [
          {
            "assertion": "Attention GET endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "84f26d8f-e38c-4466-b987-da0e8e7567a6",
          "length": 12,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "440869c3-4a85-4439-bd5c-e241b90e1dbb"
        },
        "item": {
          "id": "75ea340e-71ae-4c83-b8e6-d660361e16aa",
          "name": "Consciousness State GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "consciousness",
                "state"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e67ba8d-b6ea-4680-9fa4-12611cf329f1",
                "type": "text/javascript",
                "exec": [
                  "pm.test('State GET endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateConsciousnessState(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                  "      }",
                  "      validateConsciousnessState(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateConsciousnessState(json);"
                ],
                "_lastExecutionId": "4ec5d325-1501-4260-a475-c058fff362ae"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "consciousness",
              "state"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "872d46d0-cfbd-4d41-b681-e7147032ea6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1d2db8ba-2aaa-48b4-b760-c5002afd46e8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "146"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "0542ef4c-4b7f-48ad-b8e8-7b5751ce243f"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              34,
              105,
              100,
              108,
              101,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              48,
              55,
              50,
              53,
              57,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              95,
              103,
              111,
              97,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              111,
              97,
              108,
              95,
              115,
              116,
              97,
              99,
              107,
              34,
              58,
              91,
              93,
              44,
              34,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              95,
              110,
              101,
              120,
              116,
              95,
              115,
              116,
              97,
              116,
              101,
              115,
              34,
              58,
              91,
              34,
              102,
              111,
              99,
              117,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              115,
              108,
              101,
              101,
              112,
              105,
              110,
              103,
              34,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 146
        },
        "id": "75ea340e-71ae-4c83-b8e6-d660361e16aa",
        "assertions": [
          {
            "assertion": "State GET endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "02c9f506-c19a-4641-8452-27db5ad564ce",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10ac5840-eead-4bdb-ae08-388ebd78e56c"
        },
        "item": {
          "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "rules"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fbe928d4-a149-4546-9055-bd32057cd5e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "72",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
          }
        },
        "response": {
          "id": "252281b5-fb5d-4e7a-9c4b-88f0e7eb313f",
          "status": "Unprocessable Content",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "36fffe92-1185-4408-bc38-2208468142b1"
            },
            {
              "key": "content-length",
              "value": "259"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              51,
              54,
              102,
              102,
              102,
              101,
              57,
              50,
              45,
              49,
              49,
              56,
              53,
              45,
              52,
              52,
              48,
              56,
              45,
              98,
              99,
              51,
              56,
              45,
              50,
              50,
              48,
              56,
              52,
              54,
              56,
              49,
              52,
              50,
              98,
              49,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              123,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              32,
              114,
              117,
              108,
              101,
              34,
              44,
              34,
              112,
              97,
              116,
              116,
              101,
              114,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              32,
              99,
              111,
              110,
              100,
              105,
              116,
              105,
              111,
              110,
              34,
              125,
              125,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 259
        },
        "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
        "assertions": [
          {
            "assertion": "Experience rules POST endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Experience rules POST endpoint responds",
              "message": "expected [ 200, 201 ] to include 422",
              "stack": "AssertionError: expected [ 200, 201 ] to include 422\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Experience rule status validation passed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c0aeba66-8a92-406f-a064-ca45a78484fb",
          "length": 12,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e3f5b1d9-d7e1-4ca1-b12d-6c301abe69a8"
        },
        "item": {
          "id": "cfb7f713-2202-4c57-8faf-c55eb4234e59",
          "name": "Experience Candidates GET",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "candidates"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "230a3109-1b27-463b-a577-3711bc8065cd",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience candidates endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateCandidateStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                  "      }",
                  "      validateCandidateStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCandidateStatus(json);"
                ],
                "_lastExecutionId": "c3329600-d341-404a-85b6-adcfac9f4da4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "experience",
              "candidates"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "11880a96-8a30-4a4b-a881-904de47a7141",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "53099afb-a8b0-4004-9a83-fb9e1a1dc4a4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "455"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "161af0e2-9a7b-4ec7-9e45-c5bb281dbe75"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              44,
              34,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              34,
              58,
              49,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              52,
              49,
              102,
              50,
              97,
              97,
              52,
              45,
              97,
              57,
              52,
              50,
              45,
              52,
              98,
              54,
              102,
              45,
              97,
              48,
              101,
              102,
              45,
              53,
              100,
              57,
              56,
              100,
              98,
              55,
              102,
              54,
              56,
              55,
              100,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              114,
              101,
              103,
              95,
              100,
              114,
              97,
              102,
              116,
              95,
              49,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              34,
              58,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              95,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              34,
              44,
              34,
              116,
              97,
              103,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              118,
              49,
              34,
              44,
              34,
              99,
              111,
              110,
              102,
              105,
              100,
              101,
              110,
              99,
              101,
              34,
              58,
              48,
              46,
              55,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              49,
              46,
              48,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              100,
              114,
              97,
              102,
              116,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              54,
              84,
              49,
              51,
              58,
              53,
              50,
              58,
              50,
              56,
              46,
              56,
              51,
              55,
              48,
              53,
              49,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              48,
              55,
              58,
              53,
              54,
              46,
              51,
              52,
              53,
              52,
              49,
              55,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              44,
              34,
              102,
              105,
              110,
              103,
              101,
              114,
              112,
              114,
              105,
              110,
              116,
              34,
              58,
              34,
              51,
              99,
              52,
              48,
              100,
              101,
              102,
              55,
              57,
              101,
              54,
              99,
              98,
              49,
              54,
              48,
              51,
              56,
              97,
              50,
              48,
              101,
              52,
              99,
              99,
              101,
              54,
              98,
              101,
              102,
              53,
              101,
              99,
              54,
              98,
              101,
              97,
              101,
              48,
              101,
              50,
              102,
              52,
              48,
              100,
              101,
              98,
              57,
              54,
              57,
              101,
              49,
              55,
              55,
              98,
              99,
              101,
              49,
              98,
              100,
              102,
              49,
              52,
              101,
              34,
              125,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              49,
              56,
              58,
              50,
              49,
              46,
              52,
              52,
              50,
              50,
              49,
              54,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 455
        },
        "id": "cfb7f713-2202-4c57-8faf-c55eb4234e59",
        "assertions": [
          {
            "assertion": "Experience candidates endpoint responds",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7fc88d43-4ab9-408d-ac61-c449835ddbe4",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ef11341-df19-49ef-a0c2-57f5d3aa0948"
        },
        "item": {
          "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "414afb18-a366-41a8-a4e4-c2241c5c1551"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "cloud",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d79def0c-9241-4fd3-aecd-f6b401ab4199",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1dd5fbc9-5ad6-4c3e-9032-e0d8063c400a",
          "status": "Unprocessable Content",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "x-trace-id",
              "value": "f11f73af-7e7c-437e-a743-ea962de4867d"
            },
            {
              "key": "content-length",
              "value": "197"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              48,
              48,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              116,
              114,
              97,
              99,
              101,
              95,
              105,
              100,
              34,
              58,
              34,
              102,
              49,
              49,
              102,
              55,
              51,
              97,
              102,
              45,
              55,
              101,
              55,
              99,
              45,
              52,
              51,
              55,
              101,
              45,
              97,
              55,
              52,
              51,
              45,
              101,
              97,
              57,
              54,
              50,
              100,
              101,
              52,
              56,
              54,
              55,
              100,
              34,
              44,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              34,
              58,
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              113,
              117,
              101,
              114,
              121,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 197
        },
        "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
        "assertions": [
          {
            "assertion": "Cloud status endpoint responds",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Cloud status endpoint responds",
              "message": "expected [ 200 ] to include 422",
              "stack": "AssertionError: expected [ 200 ] to include 422\n   at Object.eval sandbox-script.js:1:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6063ec11-c485-496d-ba8b-ae2b62fb10f8",
          "length": 12,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e80bc5e7-a678-4191-b4b5-2e14d279d052"
        },
        "item": {
          "id": "2dd3f48c-d517-4f32-9854-954911c4ce1d",
          "name": "Observability Metrics",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "metrics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ee04a13b-29e9-44e9-9161-4a9defcba2be",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Metrics endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateMetricsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                  "      }",
                  "      validateMetricsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateMetricsStatus(json);",
                  "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "9a26a58f-9933-4cdb-8060-ade6ac78965d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "metrics"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "85e821ea-2c24-47dd-99f9-0fd4e6f3801a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fbc55fb9-20bf-489d-9524-2ba25aa7f5a9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "4067"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "6b68b7c8-882c-4146-afd9-8885d3619dec"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              115,
              110,
              97,
              112,
              115,
              104,
              111,
              116,
              95,
              108,
              111,
              97,
              100,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              101,
              120,
              99,
              101,
              112,
              116,
              105,
              111,
              110,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              124,
              52,
              48,
              52,
              34,
              58,
              51,
              44,
              34,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              108,
              111,
              117,
              100,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              124,
              52,
              50,
              50,
              34,
              58,
              51,
              44,
              34,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              103,
              101,
              116,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              103,
              101,
              116,
              95,
              115,
              116,
              97,
              116,
              101,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              115,
              116,
              97,
              116,
              101,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              47,
              97,
              99,
              116,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              114,
              117,
              108,
              101,
              115,
              124,
              52,
              50,
              50,
              34,
              58,
              51,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              124,
              52,
              48,
              53,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              124,
              52,
              50,
              50,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              124,
              52,
              48,
              53,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              124,
              50,
              48,
              48,
              34,
              58,
              50,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              47,
              112,
              108,
              97,
              110,
              124,
              50,
              48,
              48,
              34,
              58,
              51,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              115,
              121,
              110,
              99,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              105,
              116,
              101,
              109,
              115,
              95,
              115,
              121,
              110,
              99,
              101,
              100,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              124,
              50,
              48,
              48,
              34,
              58,
              49,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              101,
              120,
              112,
              111,
              114,
              116,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              124,
              50,
              48,
              48,
              34,
              58,
              49,
              125,
              44,
              34,
              116,
              105,
              109,
              105,
              110,
              103,
              115,
              34,
              58,
              123,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              97,
              103,
              101,
              110,
              116,
              115,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              55,
              51,
              51,
              48,
              51,
              51,
              51,
              50,
              55,
              48,
              55,
              53,
              51,
              52,
              50,
              51,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              53,
              55,
              57,
              48,
              48,
              48,
              51,
              50,
              50,
              49,
              52,
              56,
              50,
              48,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              50,
              54,
              57,
              57,
              57,
              57,
              57,
              49,
              55,
              53,
              57,
              54,
              53,
              55,
              56,
              54,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              50,
              53,
              55,
              57,
              48,
              48,
              48,
              51,
              50,
              50,
              49,
              52,
              56,
              50,
              48,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              108,
              111,
              117,
              100,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              53,
              51,
              50,
              51,
              51,
              51,
              57,
              51,
              55,
              55,
              56,
              52,
              48,
              51,
              54,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              54,
              53,
              52,
              48,
              48,
              48,
              54,
              48,
              56,
              50,
              53,
              48,
              52,
              57,
              57,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              51,
              50,
              57,
              48,
              48,
              48,
              51,
              54,
              54,
              56,
              53,
              49,
              54,
              56,
              55,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              54,
              53,
              52,
              48,
              48,
              48,
              54,
              48,
              56,
              50,
              53,
              48,
              52,
              57,
              57,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              55,
              53,
              57,
              54,
              54,
              55,
              51,
              53,
              52,
              57,
              52,
              54,
              51,
              51,
              53,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              57,
              48,
              48,
              48,
              48,
              48,
              53,
              57,
              50,
              54,
              57,
              51,
              54,
              56,
              54,
              53,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              53,
              48,
              57,
              48,
              48,
              49,
              49,
              48,
              55,
              56,
              56,
              54,
              52,
              51,
              51,
              54,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              57,
              48,
              48,
              48,
              48,
              48,
              53,
              57,
              50,
              54,
              57,
              51,
              54,
              56,
              54,
              53,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              47,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              51,
              50,
              51,
              48,
              48,
              48,
              51,
              50,
              49,
              49,
              54,
              52,
              55,
              50,
              55,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              49,
              54,
              49,
              48,
              48,
              48,
              56,
              56,
              49,
              51,
              52,
              52,
              48,
              56,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              53,
              56,
              55,
              57,
              57,
              57,
              51,
              56,
              49,
              49,
              50,
              52,
              57,
              55,
              51,
              51,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              49,
              54,
              49,
              48,
              48,
              48,
              56,
              56,
              49,
              51,
              52,
              52,
              48,
              56,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              101,
              99,
              117,
              116,
              105,
              111,
              110,
              47,
              97,
              99,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              57,
              48,
              53,
              57,
              54,
              54,
              54,
              57,
              54,
              54,
              51,
              57,
              56,
              53,
              53,
              55,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              53,
              55,
              54,
              48,
              48,
              48,
              57,
              50,
              56,
              56,
              55,
              56,
              55,
              56,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              54,
              52,
              57,
              57,
              57,
              55,
              48,
              51,
              54,
              57,
              48,
              52,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              51,
              53,
              55,
              54,
              48,
              48,
              48,
              57,
              50,
              56,
              56,
              55,
              56,
              55,
              56,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              55,
              53,
              52,
              52,
              51,
              51,
              51,
              51,
              52,
              56,
              48,
              53,
              48,
              55,
              49,
              52,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              49,
              57,
              51,
              48,
              48,
              48,
              50,
              52,
              53,
              56,
              51,
              57,
              51,
              53,
              55,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              48,
              57,
              51,
              48,
              48,
              48,
              51,
              54,
              51,
              53,
              53,
              56,
              53,
              51,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              49,
              57,
              51,
              48,
              48,
              48,
              50,
              52,
              53,
              56,
              51,
              57,
              51,
              53,
              55,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              47,
              114,
              117,
              108,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              54,
              54,
              50,
              48,
              51,
              51,
              51,
              51,
              56,
              52,
              49,
              48,
              49,
              53,
              56,
              57,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              49,
              51,
              55,
              56,
              48,
              48,
              48,
              50,
              55,
              54,
              49,
              54,
              51,
              50,
              50,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              53,
              49,
              52,
              48,
              48,
              48,
              48,
              55,
              54,
              56,
              48,
              48,
              53,
              56,
              53,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              49,
              51,
              55,
              56,
              48,
              48,
              48,
              50,
              55,
              54,
              49,
              54,
              51,
              50,
              50,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              49,
              48,
              53,
              52,
              57,
              57,
              56,
              50,
              57,
              49,
              54,
              53,
              54,
              51,
              55,
              53,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              56,
              56,
              57,
              57,
              57,
              56,
              56,
              54,
              52,
              51,
              56,
              50,
              53,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              50,
              55,
              50,
              49,
              57,
              57,
              57,
              55,
              55,
              49,
              56,
              57,
              51,
              48,
              50,
              52,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              56,
              56,
              57,
              57,
              57,
              56,
              56,
              54,
              52,
              51,
              56,
              50,
              53,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              115,
              121,
              110,
              99,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              54,
              53,
              53,
              55,
              51,
              51,
              51,
              54,
              56,
              48,
              52,
              57,
              48,
              54,
              53,
              51,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              52,
              53,
              50,
              51,
              48,
              48,
              48,
              57,
              52,
              48,
              54,
              56,
              48,
              53,
              48,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              54,
              50,
              54,
              48,
              57,
              57,
              57,
              57,
              52,
              52,
              48,
              54,
              49,
              48,
              52,
              49,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              51,
              46,
              52,
              53,
              50,
              51,
              48,
              48,
              48,
              57,
              52,
              48,
              54,
              56,
              48,
              53,
              48,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              108,
              111,
              103,
              115,
              47,
              115,
              101,
              97,
              114,
              99,
              104,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              50,
              52,
              51,
              52,
              57,
              57,
              49,
              51,
              51,
              55,
              51,
              53,
              56,
              57,
              53,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              54,
              48,
              53,
              57,
              57,
              56,
              57,
              56,
              51,
              54,
              48,
              54,
              54,
              57,
              54,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              51,
              56,
              56,
              48,
              57,
              57,
              57,
              50,
              56,
              51,
              56,
              54,
              53,
              48,
              57,
              52,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              54,
              48,
              53,
              57,
              57,
              56,
              57,
              56,
              51,
              54,
              48,
              54,
              54,
              57,
              54,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              111,
              98,
              115,
              101,
              114,
              118,
              97,
              98,
              105,
              108,
              105,
              116,
              121,
              47,
              109,
              101,
              116,
              114,
              105,
              99,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              50,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              48,
              52,
              52,
              57,
              57,
              50,
              52,
              51,
              48,
              49,
              51,
              53,
              54,
              49,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              49,
              50,
              57,
              57,
              57,
              51,
              48,
              55,
              55,
              51,
              54,
              55,
              53,
              52,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              51,
              57,
              53,
              57,
              57,
              57,
              49,
              55,
              56,
              50,
              57,
              48,
              51,
              54,
              55,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              53,
              52,
              49,
              50,
              57,
              57,
              57,
              51,
              48,
              55,
              55,
              51,
              54,
              55,
              53,
              52,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              80,
              79,
              83,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              114,
              101,
              97,
              115,
              111,
              110,
              105,
              110,
              103,
              47,
              112,
              108,
              97,
              110,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              48,
              51,
              54,
              54,
              51,
              51,
              51,
              49,
              48,
              53,
              50,
              57,
              48,
              57,
              51,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              56,
              50,
              48,
              48,
              48,
              48,
              51,
              54,
              51,
              53,
              49,
              51,
              56,
              50,
              55,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              57,
              53,
              50,
              51,
              57,
              57,
              57,
              49,
              55,
              56,
              55,
              56,
              50,
              49,
              48,
              53,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              49,
              46,
              49,
              56,
              50,
              48,
              48,
              48,
              48,
              51,
              54,
              51,
              53,
              49,
              51,
              56,
              50,
              55,
              125,
              44,
              34,
              109,
              101,
              109,
              111,
              114,
              121,
              95,
              115,
              121,
              110,
              99,
              95,
              109,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              48,
              49,
              51,
              125,
              44,
              34,
              104,
              116,
              116,
              112,
              95,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              95,
              100,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              95,
              109,
              115,
              124,
              71,
              69,
              84,
              124,
              47,
              97,
              112,
              105,
              47,
              118,
              50,
              46,
              51,
              45,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              47,
              109,
              101,
              109,
              111,
              114,
              121,
              47,
              101,
              120,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              46,
              48,
              44,
              34,
              97,
              118,
              103,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              55,
              50,
              55,
              57,
              57,
              57,
              57,
              49,
              50,
              53,
              55,
              52,
              56,
              56,
              55,
              44,
              34,
              112,
              57,
              53,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              55,
              50,
              55,
              57,
              57,
              57,
              57,
              49,
              50,
              53,
              55,
              52,
              56,
              56,
              55,
              44,
              34,
              109,
              105,
              110,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              55,
              50,
              55,
              57,
              57,
              57,
              57,
              49,
              50,
              53,
              55,
              52,
              56,
              56,
              55,
              44,
              34,
              109,
              97,
              120,
              95,
              109,
              115,
              34,
              58,
              48,
              46,
              52,
              55,
              50,
              55,
              57,
              57,
              57,
              57,
              49,
              50,
              53,
              55,
              52,
              56,
              56,
              55,
              125,
              125,
              44,
              34,
              103,
              97,
              117,
              103,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              115,
              116,
              97,
              116,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              97,
              116,
              116,
              101,
              110,
              116,
              105,
              111,
              110,
              95,
              115,
              116,
              97,
              99,
              107,
              95,
              115,
              105,
              122,
              101,
              34,
              58,
              48,
              46,
              48,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              114,
              117,
              108,
              101,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              51,
              46,
              48,
              44,
              34,
              101,
              120,
              112,
              101,
              114,
              105,
              101,
              110,
              99,
              101,
              95,
              99,
              97,
              110,
              100,
              105,
              100,
              97,
              116,
              101,
              115,
              95,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              46,
              48,
              125,
              44,
              34,
              108,
              97,
              98,
              101,
              108,
              115,
              34,
              58,
              123,
              34,
              99,
              111,
              110,
              115,
              99,
              105,
              111,
              117,
              115,
              110,
              101,
              115,
              115,
              95,
              115,
              116,
              97,
              116,
              101,
              95,
              108,
              97,
              98,
              101,
              108,
              34,
              58,
              34,
              105,
              100,
              108,
              101,
              34,
              125,
              44,
              34,
              119,
              105,
              110,
              100,
              111,
              119,
              34,
              58,
              50,
              48,
              48,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              49,
              56,
              58,
              50,
              50,
              46,
              54,
              54,
              56,
              50,
              53,
              54,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 5,
          "responseSize": 4067
        },
        "id": "2dd3f48c-d517-4f32-9854-954911c4ce1d",
        "assertions": [
          {
            "assertion": "Metrics endpoint responds",
            "skipped": false
          },
          {
            "assertion": "Metrics status validation completed",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "56586d5b-688d-4e0a-b676-6333e1d96cf3",
          "length": 12,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7c69cea2-bdea-4459-b62b-0342ece330fd"
        },
        "item": {
          "id": "91088cfe-59c9-4831-ac5c-c868b9e8d37d",
          "name": "Observability Logs Search",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "observability",
                "logs",
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "test"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a97433e8-3eda-4ccc-ab25-222df8fa0b28",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Logs search endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "",
                  "function validateLogsStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                  "      }",
                  "      validateLogsStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateLogsStatus(json);"
                ],
                "_lastExecutionId": "0f63e965-3244-4c65-b983-facff5bf7e5a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8000",
            "path": [
              "api",
              "v2.3-preview",
              "observability",
              "logs",
              "search"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "q",
                "value": "test"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e1f2c78-3cbc-4211-85bf-b139c3105ec9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f9d2dafa-3afe-4d8a-8657-9f0d0b021015",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "date",
              "value": "Thu, 28 Aug 2025 09:18:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "83"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "x-trace-id",
              "value": "2bd32ce3-58bd-4d54-b681-84c77d1d2359"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              48,
              44,
              34,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              34,
              58,
              48,
              44,
              34,
              105,
              116,
              101,
              109,
              115,
              34,
              58,
              91,
              93,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              49,
              56,
              58,
              50,
              51,
              46,
              50,
              57,
              48,
              48,
              51,
              53,
              43,
              48,
              48,
              58,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 6,
          "responseSize": 83
        },
        "id": "91088cfe-59c9-4831-ac5c-c868b9e8d37d",
        "assertions": [
          {
            "assertion": "Logs search endpoint responds",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6075
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Experience rules POST endpoint responds",
          "message": "expected [ 200, 201 ] to include 422",
          "stack": "AssertionError: expected [ 200, 201 ] to include 422\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "ba1159292486a56c62d7a7cb11ef962d",
          "id": "1342cfa9-17b9-4a15-bfe3-6de318510481",
          "timestamp": 1756372700838,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
          "name": "Experience Rules POST",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "experience",
                "rules"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Experience rules POST endpoint responds', function () {",
                  "  pm.expect([200,201]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                  "",
                  "function validateExperienceStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        // Experience rules can use 'active' (enable/disable semantics)",
                  "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                  "      }",
                  "      validateExperienceStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateExperienceStatus(json);",
                  "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                ],
                "_lastExecutionId": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "734b3ec4-9eb3-4482-8fcb-690ed2cdc73a",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1839e289-3a6c-4980-944d-847a15e417f3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "20df372c-5c34-412d-bf8a-acaa8f63ced9"
                  }
                }
              ]
            },
            {
              "id": "145eaf01-6422-470a-b31b-de7a7cad7dc6",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1403a25-3751-476a-8148-ddb4b64c7555",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "a74721e3-19a2-4ea5-bc22-ac66921aac30"
                  }
                }
              ]
            },
            {
              "id": "b5bbd207-a879-4ab5-b583-bc299f5e66c9",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68437bf8-3c87-4c1b-b8a1-8b4423574b1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "464746e7-7fe2-48ff-a84a-aa812206c63a"
                  }
                }
              ]
            },
            {
              "id": "aabe0ec2-cf53-409b-ac77-0d7046df2957",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "178abae7-7abc-40d4-9fd1-21f149a7254d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "eddfc9fd-3724-47bd-a933-2d59d7ee6798"
                  }
                }
              ]
            },
            {
              "id": "273c969a-3f06-45d8-8c47-67c8fcd83c04",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea65a4a9-89ea-4bcb-8911-f64f68862274",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "8adb3c91-b68c-46bb-bce3-97672b07a581"
                  }
                }
              ]
            },
            {
              "id": "7dd1f98e-0be3-46f6-88f4-753ce6f58056",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "28c46c16-a521-46ba-8d41-adeb913de96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "f14914ae-5ad7-4c35-bf31-6398f8e24281"
                  }
                }
              ]
            },
            {
              "id": "75ea340e-71ae-4c83-b8e6-d660361e16aa",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e67ba8d-b6ea-4680-9fa4-12611cf329f1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "4ec5d325-1501-4260-a475-c058fff362ae"
                  }
                }
              ]
            },
            {
              "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
                  }
                }
              ]
            },
            {
              "id": "cfb7f713-2202-4c57-8faf-c55eb4234e59",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "230a3109-1b27-463b-a577-3711bc8065cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "c3329600-d341-404a-85b6-adcfac9f4da4"
                  }
                }
              ]
            },
            {
              "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "414afb18-a366-41a8-a4e4-c2241c5c1551"
                  }
                }
              ]
            },
            {
              "id": "2dd3f48c-d517-4f32-9854-954911c4ce1d",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ee04a13b-29e9-44e9-9161-4a9defcba2be",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "9a26a58f-9933-4cdb-8060-ade6ac78965d"
                  }
                }
              ]
            },
            {
              "id": "91088cfe-59c9-4831-ac5c-c868b9e8d37d",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a97433e8-3eda-4ccc-ab25-222df8fa0b28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "0f63e965-3244-4c65-b983-facff5bf7e5a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "98737c3c-1de2-44f0-a1a9-10cbbf9c2ba8",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "02c9f506-c19a-4641-8452-27db5ad564ce",
          "length": 12,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "10ac5840-eead-4bdb-ae08-388ebd78e56c",
          "scriptId": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
          "execution": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Cloud status endpoint responds",
          "message": "expected [ 200 ] to include 422",
          "stack": "AssertionError: expected [ 200 ] to include 422\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "c962c8190ca4b84cdcb6e564eb60424b",
          "id": "11bfbb2b-8159-4416-b365-9d15b4c8b021",
          "timestamp": 1756372702062,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
          "name": "Cloud Status",
          "request": {
            "url": {
              "path": [
                "api",
                "v2.3-preview",
                "cloud",
                "status"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
                "type": "text/javascript",
                "exec": [
                  "pm.test('Cloud status endpoint responds', function () {",
                  "  pm.expect([200]).to.include(pm.response.code);",
                  "});",
                  "",
                  "let json = {};",
                  "try { json = pm.response.json(); } catch (e) { json = {}; }",
                  "",
                  "const DISALLOWED = new Set(['running','success','error']);",
                  "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                  "",
                  "function validateCloudStatus(obj) {",
                  "  if (obj === null || obj === undefined) return;",
                  "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                  "  if (typeof obj === 'object') {",
                  "    Object.keys(obj).forEach(k => {",
                  "      const v = obj[k];",
                  "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                  "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                  "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                  "      }",
                  "      validateCloudStatus(v);",
                  "    });",
                  "  }",
                  "}",
                  "validateCloudStatus(json);"
                ],
                "_lastExecutionId": "414afb18-a366-41a8-a4e4-c2241c5c1551"
              }
            }
          ]
        },
        "parent": {
          "item": [
            {
              "id": "734b3ec4-9eb3-4482-8fcb-690ed2cdc73a",
              "name": "Agents Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "agents",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1839e289-3a6c-4980-944d-847a15e417f3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Response is JSON', function () {",
                      "  pm.response.to.have.header('Content-Type');",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const TASK_ALLOWED = new Set(['pending','in_progress','completed','failed','canceled','timeout']);",
                      "const AGENT_HEALTH_ALLOWED = new Set(['idle','busy','error','maintenance']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(TASK_ALLOWED.has(v) || AGENT_HEALTH_ALLOWED.has(v)).to.eql(true, `status not in allowed set: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'status must not be \\'active\\'');",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('Agent health status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "20df372c-5c34-412d-bf8a-acaa8f63ced9"
                  }
                }
              ]
            },
            {
              "id": "145eaf01-6422-470a-b31b-de7a7cad7dc6",
              "name": "Memory Sync (202 + CloudSyncJob)",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "sync"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Content-Type",
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [ { \"content\": { \"type\": \"note\", \"text\": \"hello\" } } ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1403a25-3751-476a-8148-ddb4b64c7555",
                    "type": "text/javascript",
                    "exec": [
                      "const status = pm.response.code;",
                      "pm.test('Accepted (202) or OK (200/201/204) for sync endpoint', function () {",
                      "  pm.expect([200,201,202,204]).to.include(status);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function scan(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(scan); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `status contains disallowed value: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `CloudSyncJob.status not in allowed set: ${v}`);",
                      "      }",
                      "      scan(v);",
                      "    });",
                      "  }",
                      "}",
                      "scan(json);",
                      "pm.test('CloudSyncJob status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "a74721e3-19a2-4ea5-bc22-ac66921aac30"
                  }
                }
              ]
            },
            {
              "id": "b5bbd207-a879-4ab5-b583-bc299f5e66c9",
              "name": "Memory Export",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "memory",
                    "export"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "68437bf8-3c87-4c1b-b8a1-8b4423574b1a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Export endpoint responds successfully', function () {",
                      "  pm.expect([200,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const JOB_ALLOWED = new Set(['pending','in_progress','completed','failed','timeout','manual_required']);",
                      "",
                      "function validateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Forbidden status detected: ${v}`);",
                      "        pm.expect(JOB_ALLOWED.has(v)).to.eql(true, `Invalid export job status: ${v}`);",
                      "      }",
                      "      validateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateStatus(json);"
                    ],
                    "_lastExecutionId": "464746e7-7fe2-48ff-a84a-aa812206c63a"
                  }
                }
              ]
            },
            {
              "id": "aabe0ec2-cf53-409b-ac77-0d7046df2957",
              "name": "Execution Act",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "execution",
                    "act"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"action\": \"test_action\", \"parameters\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "178abae7-7abc-40d4-9fd1-21f149a7254d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Execution endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const EXECUTION_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validateExecutionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExecutionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `ExecutionResult forbidden status: ${v}`);",
                      "        pm.expect(EXECUTION_ALLOWED.has(v)).to.eql(true, `ExecutionResult invalid status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'ExecutionResult status cannot be active');",
                      "      }",
                      "      validateExecutionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExecutionStatus(json);"
                    ],
                    "_lastExecutionId": "eddfc9fd-3724-47bd-a933-2d59d7ee6798"
                  }
                }
              ]
            },
            {
              "id": "273c969a-3f06-45d8-8c47-67c8fcd83c04",
              "name": "Reasoning Plan",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "reasoning",
                    "plan"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"goal\": \"test planning\", \"context\": {}}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea65a4a9-89ea-4bcb-8911-f64f68862274",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Reasoning plan endpoint responds', function () {",
                      "  pm.expect([200,201,202]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const PLAN_ALLOWED = new Set(['pending','in_progress','completed','failed']);",
                      "",
                      "function validatePlanStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validatePlanStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Planning forbidden status: ${v}`);",
                      "        pm.expect(PLAN_ALLOWED.has(v)).to.eql(true, `Planning invalid status: ${v}`);",
                      "      }",
                      "      validatePlanStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validatePlanStatus(json);"
                    ],
                    "_lastExecutionId": "8adb3c91-b68c-46bb-bce3-97672b07a581"
                  }
                }
              ]
            },
            {
              "id": "7dd1f98e-0be3-46f6-88f4-753ce6f58056",
              "name": "Consciousness Attention GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "attention"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "28c46c16-a521-46ba-8d41-adeb913de96f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Attention GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const ATTENTION_ALLOWED = new Set(['idle','busy','focused','distracted']);",
                      "",
                      "function validateAttentionStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateAttentionStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Attention forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Attention status cannot be active');",
                      "      }",
                      "      validateAttentionStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateAttentionStatus(json);"
                    ],
                    "_lastExecutionId": "f14914ae-5ad7-4c35-bf31-6398f8e24281"
                  }
                }
              ]
            },
            {
              "id": "75ea340e-71ae-4c83-b8e6-d660361e16aa",
              "name": "Consciousness State GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "consciousness",
                    "state"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e67ba8d-b6ea-4680-9fa4-12611cf329f1",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('State GET endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateConsciousnessState(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateConsciousnessState); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Consciousness forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Consciousness status cannot be active');",
                      "      }",
                      "      validateConsciousnessState(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateConsciousnessState(json);"
                    ],
                    "_lastExecutionId": "4ec5d325-1501-4260-a475-c058fff362ae"
                  }
                }
              ]
            },
            {
              "id": "a5844074-8d77-4fb9-877c-e08bf948fa64",
              "name": "Experience Rules POST",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "rules"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\"title\": \"test rule\", \"pattern\": \"test\", \"condition\": \"test condition\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54874eb6-2a86-41c6-92fd-4d8fa74937ac",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience rules POST endpoint responds', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateExperienceStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateExperienceStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        // Experience rules can use 'active' (enable/disable semantics)",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `ExperienceRule invalid status: ${v}`);",
                      "      }",
                      "      validateExperienceStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateExperienceStatus(json);",
                      "pm.test('Experience rule status validation passed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "4b30dc14-ab58-4a18-bff1-b9600239bb8f"
                  }
                }
              ]
            },
            {
              "id": "cfb7f713-2202-4c57-8faf-c55eb4234e59",
              "name": "Experience Candidates GET",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "experience",
                    "candidates"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "230a3109-1b27-463b-a577-3711bc8065cd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Experience candidates endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const EXPERIENCE_ALLOWED = new Set(['active','deprecated','draft']);",
                      "",
                      "function validateCandidateStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCandidateStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(EXPERIENCE_ALLOWED.has(v)).to.eql(true, `Candidate invalid status: ${v}`);",
                      "      }",
                      "      validateCandidateStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCandidateStatus(json);"
                    ],
                    "_lastExecutionId": "c3329600-d341-404a-85b6-adcfac9f4da4"
                  }
                }
              ]
            },
            {
              "id": "1b77d0ed-939d-48ae-bbfa-c6c456a073e2",
              "name": "Cloud Status",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "cloud",
                    "status"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Cloud status endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "const CLOUD_STATUS_ALLOWED = new Set(['connected','disconnected','syncing','error']);",
                      "",
                      "function validateCloudStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateCloudStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Cloud forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Cloud status cannot be active');",
                      "      }",
                      "      validateCloudStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateCloudStatus(json);"
                    ],
                    "_lastExecutionId": "414afb18-a366-41a8-a4e4-c2241c5c1551"
                  }
                }
              ]
            },
            {
              "id": "2dd3f48c-d517-4f32-9854-954911c4ce1d",
              "name": "Observability Metrics",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "metrics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ee04a13b-29e9-44e9-9161-4a9defcba2be",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Metrics endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateMetricsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateMetricsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Metrics forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Metrics status cannot be active');",
                      "      }",
                      "      validateMetricsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateMetricsStatus(json);",
                      "pm.test('Metrics status validation completed', function () { pm.expect(true).to.be.true; });"
                    ],
                    "_lastExecutionId": "9a26a58f-9933-4cdb-8060-ade6ac78965d"
                  }
                }
              ]
            },
            {
              "id": "91088cfe-59c9-4831-ac5c-c868b9e8d37d",
              "name": "Observability Logs Search",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "v2.3-preview",
                    "observability",
                    "logs",
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "q",
                      "value": "test"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a97433e8-3eda-4ccc-ab25-222df8fa0b28",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('Logs search endpoint responds', function () {",
                      "  pm.expect([200]).to.include(pm.response.code);",
                      "});",
                      "",
                      "let json = {};",
                      "try { json = pm.response.json(); } catch (e) { json = {}; }",
                      "",
                      "const DISALLOWED = new Set(['running','success','error']);",
                      "",
                      "function validateLogsStatus(obj) {",
                      "  if (obj === null || obj === undefined) return;",
                      "  if (Array.isArray(obj)) { obj.forEach(validateLogsStatus); return; }",
                      "  if (typeof obj === 'object') {",
                      "    Object.keys(obj).forEach(k => {",
                      "      const v = obj[k];",
                      "      if (k.toLowerCase() === 'status' && typeof v === 'string') {",
                      "        pm.expect(DISALLOWED.has(v)).to.eql(false, `Logs forbidden status: ${v}`);",
                      "        pm.expect(v !== 'active').to.eql(true, 'Logs status cannot be active');",
                      "      }",
                      "      validateLogsStatus(v);",
                      "    });",
                      "  }",
                      "}",
                      "validateLogsStatus(json);"
                    ],
                    "_lastExecutionId": "0f63e965-3244-4c65-b983-facff5bf7e5a"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "98737c3c-1de2-44f0-a1a9-10cbbf9c2ba8",
            "name": "V2.3 Status Enum Compliance - Enhanced Coverage",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "Comprehensive assertions to enforce status enums across all APIs (95% coverage target)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "7fc88d43-4ab9-408d-ac61-c449835ddbe4",
          "length": 12,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4ef11341-df19-49ef-a0c2-57f5d3aa0948",
          "scriptId": "69b74d20-0689-4a1d-9b4e-466f4b13ba24",
          "execution": "414afb18-a366-41a8-a4e4-c2241c5c1551"
        }
      }
    ],
    "error": null
  }
}